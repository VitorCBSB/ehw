#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'testeio' in
 * file './testeio.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'two_port_mem', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'TWO_PORT_MEM_'.
 * The prefix is the slave descriptor.
 */
#define TWO_PORT_MEM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define TWO_PORT_MEM_COMPONENT_NAME two_port_mem
#define TWO_PORT_MEM_BASE 0x0
#define TWO_PORT_MEM_SPAN 262144
#define TWO_PORT_MEM_END 0x3ffff
#define TWO_PORT_MEM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define TWO_PORT_MEM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define TWO_PORT_MEM_CONTENTS_INFO ""
#define TWO_PORT_MEM_DUAL_PORT 1
#define TWO_PORT_MEM_GUI_RAM_BLOCK_TYPE AUTO
#define TWO_PORT_MEM_INIT_CONTENTS_FILE testeio_two_port_mem
#define TWO_PORT_MEM_INIT_MEM_CONTENT 1
#define TWO_PORT_MEM_INSTANCE_ID NONE
#define TWO_PORT_MEM_NON_DEFAULT_INIT_FILE_ENABLED 0
#define TWO_PORT_MEM_RAM_BLOCK_TYPE AUTO
#define TWO_PORT_MEM_READ_DURING_WRITE_MODE DONT_CARE
#define TWO_PORT_MEM_SINGLE_CLOCK_OP 0
#define TWO_PORT_MEM_SIZE_MULTIPLE 1
#define TWO_PORT_MEM_SIZE_VALUE 262144
#define TWO_PORT_MEM_WRITABLE 1
#define TWO_PORT_MEM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define TWO_PORT_MEM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define TWO_PORT_MEM_MEMORY_INFO_GENERATE_HEX 1
#define TWO_PORT_MEM_MEMORY_INFO_HAS_BYTE_LANE 0
#define TWO_PORT_MEM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define TWO_PORT_MEM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define TWO_PORT_MEM_MEMORY_INFO_MEM_INIT_FILENAME testeio_two_port_mem

/*
 * Macros for device 'expected_output_18', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_18_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_18_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_18_COMPONENT_NAME expected_output_18
#define EXPECTED_OUTPUT_18_BASE 0x40000
#define EXPECTED_OUTPUT_18_SPAN 16
#define EXPECTED_OUTPUT_18_END 0x4000f
#define EXPECTED_OUTPUT_18_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_18_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_18_CAPTURE 0
#define EXPECTED_OUTPUT_18_DATA_WIDTH 32
#define EXPECTED_OUTPUT_18_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_18_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_18_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_18_FREQ 50000000
#define EXPECTED_OUTPUT_18_HAS_IN 0
#define EXPECTED_OUTPUT_18_HAS_OUT 1
#define EXPECTED_OUTPUT_18_HAS_TRI 0
#define EXPECTED_OUTPUT_18_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_18_RESET_VALUE 0

/*
 * Macros for device 'expected_output_31', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_31_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_31_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_31_COMPONENT_NAME expected_output_31
#define EXPECTED_OUTPUT_31_BASE 0x40210
#define EXPECTED_OUTPUT_31_SPAN 16
#define EXPECTED_OUTPUT_31_END 0x4021f
#define EXPECTED_OUTPUT_31_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_31_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_31_CAPTURE 0
#define EXPECTED_OUTPUT_31_DATA_WIDTH 32
#define EXPECTED_OUTPUT_31_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_31_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_31_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_31_FREQ 50000000
#define EXPECTED_OUTPUT_31_HAS_IN 0
#define EXPECTED_OUTPUT_31_HAS_OUT 1
#define EXPECTED_OUTPUT_31_HAS_TRI 0
#define EXPECTED_OUTPUT_31_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_31_RESET_VALUE 0

/*
 * Macros for device 'expected_output_30', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_30_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_30_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_30_COMPONENT_NAME expected_output_30
#define EXPECTED_OUTPUT_30_BASE 0x40220
#define EXPECTED_OUTPUT_30_SPAN 16
#define EXPECTED_OUTPUT_30_END 0x4022f
#define EXPECTED_OUTPUT_30_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_30_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_30_CAPTURE 0
#define EXPECTED_OUTPUT_30_DATA_WIDTH 32
#define EXPECTED_OUTPUT_30_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_30_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_30_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_30_FREQ 50000000
#define EXPECTED_OUTPUT_30_HAS_IN 0
#define EXPECTED_OUTPUT_30_HAS_OUT 1
#define EXPECTED_OUTPUT_30_HAS_TRI 0
#define EXPECTED_OUTPUT_30_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_30_RESET_VALUE 0

/*
 * Macros for device 'expected_output_29', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_29_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_29_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_29_COMPONENT_NAME expected_output_29
#define EXPECTED_OUTPUT_29_BASE 0x40230
#define EXPECTED_OUTPUT_29_SPAN 16
#define EXPECTED_OUTPUT_29_END 0x4023f
#define EXPECTED_OUTPUT_29_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_29_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_29_CAPTURE 0
#define EXPECTED_OUTPUT_29_DATA_WIDTH 32
#define EXPECTED_OUTPUT_29_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_29_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_29_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_29_FREQ 50000000
#define EXPECTED_OUTPUT_29_HAS_IN 0
#define EXPECTED_OUTPUT_29_HAS_OUT 1
#define EXPECTED_OUTPUT_29_HAS_TRI 0
#define EXPECTED_OUTPUT_29_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_29_RESET_VALUE 0

/*
 * Macros for device 'expected_output_28', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_28_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_28_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_28_COMPONENT_NAME expected_output_28
#define EXPECTED_OUTPUT_28_BASE 0x40240
#define EXPECTED_OUTPUT_28_SPAN 16
#define EXPECTED_OUTPUT_28_END 0x4024f
#define EXPECTED_OUTPUT_28_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_28_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_28_CAPTURE 0
#define EXPECTED_OUTPUT_28_DATA_WIDTH 32
#define EXPECTED_OUTPUT_28_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_28_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_28_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_28_FREQ 50000000
#define EXPECTED_OUTPUT_28_HAS_IN 0
#define EXPECTED_OUTPUT_28_HAS_OUT 1
#define EXPECTED_OUTPUT_28_HAS_TRI 0
#define EXPECTED_OUTPUT_28_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_28_RESET_VALUE 0

/*
 * Macros for device 'expected_output_27', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_27_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_27_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_27_COMPONENT_NAME expected_output_27
#define EXPECTED_OUTPUT_27_BASE 0x40250
#define EXPECTED_OUTPUT_27_SPAN 16
#define EXPECTED_OUTPUT_27_END 0x4025f
#define EXPECTED_OUTPUT_27_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_27_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_27_CAPTURE 0
#define EXPECTED_OUTPUT_27_DATA_WIDTH 32
#define EXPECTED_OUTPUT_27_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_27_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_27_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_27_FREQ 50000000
#define EXPECTED_OUTPUT_27_HAS_IN 0
#define EXPECTED_OUTPUT_27_HAS_OUT 1
#define EXPECTED_OUTPUT_27_HAS_TRI 0
#define EXPECTED_OUTPUT_27_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_27_RESET_VALUE 0

/*
 * Macros for device 'expected_output_26', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_26_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_26_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_26_COMPONENT_NAME expected_output_26
#define EXPECTED_OUTPUT_26_BASE 0x40260
#define EXPECTED_OUTPUT_26_SPAN 16
#define EXPECTED_OUTPUT_26_END 0x4026f
#define EXPECTED_OUTPUT_26_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_26_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_26_CAPTURE 0
#define EXPECTED_OUTPUT_26_DATA_WIDTH 32
#define EXPECTED_OUTPUT_26_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_26_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_26_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_26_FREQ 50000000
#define EXPECTED_OUTPUT_26_HAS_IN 0
#define EXPECTED_OUTPUT_26_HAS_OUT 1
#define EXPECTED_OUTPUT_26_HAS_TRI 0
#define EXPECTED_OUTPUT_26_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_26_RESET_VALUE 0

/*
 * Macros for device 'expected_output_25', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_25_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_25_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_25_COMPONENT_NAME expected_output_25
#define EXPECTED_OUTPUT_25_BASE 0x40270
#define EXPECTED_OUTPUT_25_SPAN 16
#define EXPECTED_OUTPUT_25_END 0x4027f
#define EXPECTED_OUTPUT_25_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_25_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_25_CAPTURE 0
#define EXPECTED_OUTPUT_25_DATA_WIDTH 32
#define EXPECTED_OUTPUT_25_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_25_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_25_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_25_FREQ 50000000
#define EXPECTED_OUTPUT_25_HAS_IN 0
#define EXPECTED_OUTPUT_25_HAS_OUT 1
#define EXPECTED_OUTPUT_25_HAS_TRI 0
#define EXPECTED_OUTPUT_25_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_25_RESET_VALUE 0

/*
 * Macros for device 'expected_output_24', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_24_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_24_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_24_COMPONENT_NAME expected_output_24
#define EXPECTED_OUTPUT_24_BASE 0x40280
#define EXPECTED_OUTPUT_24_SPAN 16
#define EXPECTED_OUTPUT_24_END 0x4028f
#define EXPECTED_OUTPUT_24_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_24_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_24_CAPTURE 0
#define EXPECTED_OUTPUT_24_DATA_WIDTH 32
#define EXPECTED_OUTPUT_24_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_24_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_24_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_24_FREQ 50000000
#define EXPECTED_OUTPUT_24_HAS_IN 0
#define EXPECTED_OUTPUT_24_HAS_OUT 1
#define EXPECTED_OUTPUT_24_HAS_TRI 0
#define EXPECTED_OUTPUT_24_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_24_RESET_VALUE 0

/*
 * Macros for device 'expected_output_23', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_23_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_23_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_23_COMPONENT_NAME expected_output_23
#define EXPECTED_OUTPUT_23_BASE 0x40290
#define EXPECTED_OUTPUT_23_SPAN 16
#define EXPECTED_OUTPUT_23_END 0x4029f
#define EXPECTED_OUTPUT_23_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_23_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_23_CAPTURE 0
#define EXPECTED_OUTPUT_23_DATA_WIDTH 32
#define EXPECTED_OUTPUT_23_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_23_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_23_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_23_FREQ 50000000
#define EXPECTED_OUTPUT_23_HAS_IN 0
#define EXPECTED_OUTPUT_23_HAS_OUT 1
#define EXPECTED_OUTPUT_23_HAS_TRI 0
#define EXPECTED_OUTPUT_23_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_23_RESET_VALUE 0

/*
 * Macros for device 'expected_output_22', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_22_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_22_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_22_COMPONENT_NAME expected_output_22
#define EXPECTED_OUTPUT_22_BASE 0x402a0
#define EXPECTED_OUTPUT_22_SPAN 16
#define EXPECTED_OUTPUT_22_END 0x402af
#define EXPECTED_OUTPUT_22_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_22_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_22_CAPTURE 0
#define EXPECTED_OUTPUT_22_DATA_WIDTH 32
#define EXPECTED_OUTPUT_22_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_22_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_22_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_22_FREQ 50000000
#define EXPECTED_OUTPUT_22_HAS_IN 0
#define EXPECTED_OUTPUT_22_HAS_OUT 1
#define EXPECTED_OUTPUT_22_HAS_TRI 0
#define EXPECTED_OUTPUT_22_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_22_RESET_VALUE 0

/*
 * Macros for device 'expected_output_21', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_21_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_21_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_21_COMPONENT_NAME expected_output_21
#define EXPECTED_OUTPUT_21_BASE 0x402b0
#define EXPECTED_OUTPUT_21_SPAN 16
#define EXPECTED_OUTPUT_21_END 0x402bf
#define EXPECTED_OUTPUT_21_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_21_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_21_CAPTURE 0
#define EXPECTED_OUTPUT_21_DATA_WIDTH 32
#define EXPECTED_OUTPUT_21_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_21_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_21_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_21_FREQ 50000000
#define EXPECTED_OUTPUT_21_HAS_IN 0
#define EXPECTED_OUTPUT_21_HAS_OUT 1
#define EXPECTED_OUTPUT_21_HAS_TRI 0
#define EXPECTED_OUTPUT_21_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_21_RESET_VALUE 0

/*
 * Macros for device 'expected_output_20', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_20_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_20_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_20_COMPONENT_NAME expected_output_20
#define EXPECTED_OUTPUT_20_BASE 0x402c0
#define EXPECTED_OUTPUT_20_SPAN 16
#define EXPECTED_OUTPUT_20_END 0x402cf
#define EXPECTED_OUTPUT_20_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_20_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_20_CAPTURE 0
#define EXPECTED_OUTPUT_20_DATA_WIDTH 32
#define EXPECTED_OUTPUT_20_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_20_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_20_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_20_FREQ 50000000
#define EXPECTED_OUTPUT_20_HAS_IN 0
#define EXPECTED_OUTPUT_20_HAS_OUT 1
#define EXPECTED_OUTPUT_20_HAS_TRI 0
#define EXPECTED_OUTPUT_20_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_20_RESET_VALUE 0

/*
 * Macros for device 'expected_output_19', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_19_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_19_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_19_COMPONENT_NAME expected_output_19
#define EXPECTED_OUTPUT_19_BASE 0x402d0
#define EXPECTED_OUTPUT_19_SPAN 16
#define EXPECTED_OUTPUT_19_END 0x402df
#define EXPECTED_OUTPUT_19_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_19_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_19_CAPTURE 0
#define EXPECTED_OUTPUT_19_DATA_WIDTH 32
#define EXPECTED_OUTPUT_19_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_19_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_19_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_19_FREQ 50000000
#define EXPECTED_OUTPUT_19_HAS_IN 0
#define EXPECTED_OUTPUT_19_HAS_OUT 1
#define EXPECTED_OUTPUT_19_HAS_TRI 0
#define EXPECTED_OUTPUT_19_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_19_RESET_VALUE 0

/*
 * Macros for device 'expected_output_17', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_17_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_17_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_17_COMPONENT_NAME expected_output_17
#define EXPECTED_OUTPUT_17_BASE 0x402e0
#define EXPECTED_OUTPUT_17_SPAN 16
#define EXPECTED_OUTPUT_17_END 0x402ef
#define EXPECTED_OUTPUT_17_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_17_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_17_CAPTURE 0
#define EXPECTED_OUTPUT_17_DATA_WIDTH 32
#define EXPECTED_OUTPUT_17_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_17_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_17_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_17_FREQ 50000000
#define EXPECTED_OUTPUT_17_HAS_IN 0
#define EXPECTED_OUTPUT_17_HAS_OUT 1
#define EXPECTED_OUTPUT_17_HAS_TRI 0
#define EXPECTED_OUTPUT_17_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_17_RESET_VALUE 0

/*
 * Macros for device 'expected_output_16', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_16_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_16_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_16_COMPONENT_NAME expected_output_16
#define EXPECTED_OUTPUT_16_BASE 0x402f0
#define EXPECTED_OUTPUT_16_SPAN 16
#define EXPECTED_OUTPUT_16_END 0x402ff
#define EXPECTED_OUTPUT_16_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_16_CAPTURE 0
#define EXPECTED_OUTPUT_16_DATA_WIDTH 32
#define EXPECTED_OUTPUT_16_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_16_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_16_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_16_FREQ 50000000
#define EXPECTED_OUTPUT_16_HAS_IN 0
#define EXPECTED_OUTPUT_16_HAS_OUT 1
#define EXPECTED_OUTPUT_16_HAS_TRI 0
#define EXPECTED_OUTPUT_16_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_16_RESET_VALUE 0

/*
 * Macros for device 'expected_output_15', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_15_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_15_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_15_COMPONENT_NAME expected_output_15
#define EXPECTED_OUTPUT_15_BASE 0x40300
#define EXPECTED_OUTPUT_15_SPAN 16
#define EXPECTED_OUTPUT_15_END 0x4030f
#define EXPECTED_OUTPUT_15_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_15_CAPTURE 0
#define EXPECTED_OUTPUT_15_DATA_WIDTH 32
#define EXPECTED_OUTPUT_15_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_15_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_15_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_15_FREQ 50000000
#define EXPECTED_OUTPUT_15_HAS_IN 0
#define EXPECTED_OUTPUT_15_HAS_OUT 1
#define EXPECTED_OUTPUT_15_HAS_TRI 0
#define EXPECTED_OUTPUT_15_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_15_RESET_VALUE 0

/*
 * Macros for device 'expected_output_14', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_14_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_14_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_14_COMPONENT_NAME expected_output_14
#define EXPECTED_OUTPUT_14_BASE 0x40310
#define EXPECTED_OUTPUT_14_SPAN 16
#define EXPECTED_OUTPUT_14_END 0x4031f
#define EXPECTED_OUTPUT_14_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_14_CAPTURE 0
#define EXPECTED_OUTPUT_14_DATA_WIDTH 32
#define EXPECTED_OUTPUT_14_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_14_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_14_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_14_FREQ 50000000
#define EXPECTED_OUTPUT_14_HAS_IN 0
#define EXPECTED_OUTPUT_14_HAS_OUT 1
#define EXPECTED_OUTPUT_14_HAS_TRI 0
#define EXPECTED_OUTPUT_14_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_14_RESET_VALUE 0

/*
 * Macros for device 'expected_output_13', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_13_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_13_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_13_COMPONENT_NAME expected_output_13
#define EXPECTED_OUTPUT_13_BASE 0x40320
#define EXPECTED_OUTPUT_13_SPAN 16
#define EXPECTED_OUTPUT_13_END 0x4032f
#define EXPECTED_OUTPUT_13_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_13_CAPTURE 0
#define EXPECTED_OUTPUT_13_DATA_WIDTH 32
#define EXPECTED_OUTPUT_13_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_13_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_13_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_13_FREQ 50000000
#define EXPECTED_OUTPUT_13_HAS_IN 0
#define EXPECTED_OUTPUT_13_HAS_OUT 1
#define EXPECTED_OUTPUT_13_HAS_TRI 0
#define EXPECTED_OUTPUT_13_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_13_RESET_VALUE 0

/*
 * Macros for device 'expected_output_12', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_12_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_12_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_12_COMPONENT_NAME expected_output_12
#define EXPECTED_OUTPUT_12_BASE 0x40330
#define EXPECTED_OUTPUT_12_SPAN 16
#define EXPECTED_OUTPUT_12_END 0x4033f
#define EXPECTED_OUTPUT_12_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_12_CAPTURE 0
#define EXPECTED_OUTPUT_12_DATA_WIDTH 32
#define EXPECTED_OUTPUT_12_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_12_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_12_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_12_FREQ 50000000
#define EXPECTED_OUTPUT_12_HAS_IN 0
#define EXPECTED_OUTPUT_12_HAS_OUT 1
#define EXPECTED_OUTPUT_12_HAS_TRI 0
#define EXPECTED_OUTPUT_12_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_12_RESET_VALUE 0

/*
 * Macros for device 'expected_output_11', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_11_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_11_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_11_COMPONENT_NAME expected_output_11
#define EXPECTED_OUTPUT_11_BASE 0x40340
#define EXPECTED_OUTPUT_11_SPAN 16
#define EXPECTED_OUTPUT_11_END 0x4034f
#define EXPECTED_OUTPUT_11_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_11_CAPTURE 0
#define EXPECTED_OUTPUT_11_DATA_WIDTH 32
#define EXPECTED_OUTPUT_11_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_11_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_11_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_11_FREQ 50000000
#define EXPECTED_OUTPUT_11_HAS_IN 0
#define EXPECTED_OUTPUT_11_HAS_OUT 1
#define EXPECTED_OUTPUT_11_HAS_TRI 0
#define EXPECTED_OUTPUT_11_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_11_RESET_VALUE 0

/*
 * Macros for device 'expected_output_10', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_10_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_10_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_10_COMPONENT_NAME expected_output_10
#define EXPECTED_OUTPUT_10_BASE 0x40350
#define EXPECTED_OUTPUT_10_SPAN 16
#define EXPECTED_OUTPUT_10_END 0x4035f
#define EXPECTED_OUTPUT_10_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_10_CAPTURE 0
#define EXPECTED_OUTPUT_10_DATA_WIDTH 32
#define EXPECTED_OUTPUT_10_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_10_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_10_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_10_FREQ 50000000
#define EXPECTED_OUTPUT_10_HAS_IN 0
#define EXPECTED_OUTPUT_10_HAS_OUT 1
#define EXPECTED_OUTPUT_10_HAS_TRI 0
#define EXPECTED_OUTPUT_10_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_10_RESET_VALUE 0

/*
 * Macros for device 'expected_output_9', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_9_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_9_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_9_COMPONENT_NAME expected_output_9
#define EXPECTED_OUTPUT_9_BASE 0x40360
#define EXPECTED_OUTPUT_9_SPAN 16
#define EXPECTED_OUTPUT_9_END 0x4036f
#define EXPECTED_OUTPUT_9_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_9_CAPTURE 0
#define EXPECTED_OUTPUT_9_DATA_WIDTH 32
#define EXPECTED_OUTPUT_9_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_9_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_9_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_9_FREQ 50000000
#define EXPECTED_OUTPUT_9_HAS_IN 0
#define EXPECTED_OUTPUT_9_HAS_OUT 1
#define EXPECTED_OUTPUT_9_HAS_TRI 0
#define EXPECTED_OUTPUT_9_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_9_RESET_VALUE 0

/*
 * Macros for device 'expected_output_8', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_8_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_8_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_8_COMPONENT_NAME expected_output_8
#define EXPECTED_OUTPUT_8_BASE 0x40370
#define EXPECTED_OUTPUT_8_SPAN 16
#define EXPECTED_OUTPUT_8_END 0x4037f
#define EXPECTED_OUTPUT_8_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_8_CAPTURE 0
#define EXPECTED_OUTPUT_8_DATA_WIDTH 32
#define EXPECTED_OUTPUT_8_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_8_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_8_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_8_FREQ 50000000
#define EXPECTED_OUTPUT_8_HAS_IN 0
#define EXPECTED_OUTPUT_8_HAS_OUT 1
#define EXPECTED_OUTPUT_8_HAS_TRI 0
#define EXPECTED_OUTPUT_8_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_8_RESET_VALUE 0

/*
 * Macros for device 'expected_output_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_7_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_7_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_7_COMPONENT_NAME expected_output_7
#define EXPECTED_OUTPUT_7_BASE 0x40380
#define EXPECTED_OUTPUT_7_SPAN 16
#define EXPECTED_OUTPUT_7_END 0x4038f
#define EXPECTED_OUTPUT_7_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_7_CAPTURE 0
#define EXPECTED_OUTPUT_7_DATA_WIDTH 32
#define EXPECTED_OUTPUT_7_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_7_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_7_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_7_FREQ 50000000
#define EXPECTED_OUTPUT_7_HAS_IN 0
#define EXPECTED_OUTPUT_7_HAS_OUT 1
#define EXPECTED_OUTPUT_7_HAS_TRI 0
#define EXPECTED_OUTPUT_7_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_7_RESET_VALUE 0

/*
 * Macros for device 'expected_output_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_6_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_6_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_6_COMPONENT_NAME expected_output_6
#define EXPECTED_OUTPUT_6_BASE 0x40390
#define EXPECTED_OUTPUT_6_SPAN 16
#define EXPECTED_OUTPUT_6_END 0x4039f
#define EXPECTED_OUTPUT_6_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_6_CAPTURE 0
#define EXPECTED_OUTPUT_6_DATA_WIDTH 32
#define EXPECTED_OUTPUT_6_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_6_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_6_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_6_FREQ 50000000
#define EXPECTED_OUTPUT_6_HAS_IN 0
#define EXPECTED_OUTPUT_6_HAS_OUT 1
#define EXPECTED_OUTPUT_6_HAS_TRI 0
#define EXPECTED_OUTPUT_6_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_6_RESET_VALUE 0

/*
 * Macros for device 'expected_output_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_5_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_5_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_5_COMPONENT_NAME expected_output_5
#define EXPECTED_OUTPUT_5_BASE 0x403a0
#define EXPECTED_OUTPUT_5_SPAN 16
#define EXPECTED_OUTPUT_5_END 0x403af
#define EXPECTED_OUTPUT_5_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_5_CAPTURE 0
#define EXPECTED_OUTPUT_5_DATA_WIDTH 32
#define EXPECTED_OUTPUT_5_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_5_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_5_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_5_FREQ 50000000
#define EXPECTED_OUTPUT_5_HAS_IN 0
#define EXPECTED_OUTPUT_5_HAS_OUT 1
#define EXPECTED_OUTPUT_5_HAS_TRI 0
#define EXPECTED_OUTPUT_5_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_5_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_31', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_31_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_31_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_31_COMPONENT_NAME input_sequence_31
#define INPUT_SEQUENCE_31_BASE 0x405a0
#define INPUT_SEQUENCE_31_SPAN 16
#define INPUT_SEQUENCE_31_END 0x405af
#define INPUT_SEQUENCE_31_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_31_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_31_CAPTURE 0
#define INPUT_SEQUENCE_31_DATA_WIDTH 32
#define INPUT_SEQUENCE_31_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_31_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_31_EDGE_TYPE NONE
#define INPUT_SEQUENCE_31_FREQ 50000000
#define INPUT_SEQUENCE_31_HAS_IN 0
#define INPUT_SEQUENCE_31_HAS_OUT 1
#define INPUT_SEQUENCE_31_HAS_TRI 0
#define INPUT_SEQUENCE_31_IRQ_TYPE NONE
#define INPUT_SEQUENCE_31_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_30', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_30_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_30_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_30_COMPONENT_NAME input_sequence_30
#define INPUT_SEQUENCE_30_BASE 0x405b0
#define INPUT_SEQUENCE_30_SPAN 16
#define INPUT_SEQUENCE_30_END 0x405bf
#define INPUT_SEQUENCE_30_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_30_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_30_CAPTURE 0
#define INPUT_SEQUENCE_30_DATA_WIDTH 32
#define INPUT_SEQUENCE_30_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_30_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_30_EDGE_TYPE NONE
#define INPUT_SEQUENCE_30_FREQ 50000000
#define INPUT_SEQUENCE_30_HAS_IN 0
#define INPUT_SEQUENCE_30_HAS_OUT 1
#define INPUT_SEQUENCE_30_HAS_TRI 0
#define INPUT_SEQUENCE_30_IRQ_TYPE NONE
#define INPUT_SEQUENCE_30_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_29', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_29_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_29_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_29_COMPONENT_NAME input_sequence_29
#define INPUT_SEQUENCE_29_BASE 0x405c0
#define INPUT_SEQUENCE_29_SPAN 16
#define INPUT_SEQUENCE_29_END 0x405cf
#define INPUT_SEQUENCE_29_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_29_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_29_CAPTURE 0
#define INPUT_SEQUENCE_29_DATA_WIDTH 32
#define INPUT_SEQUENCE_29_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_29_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_29_EDGE_TYPE NONE
#define INPUT_SEQUENCE_29_FREQ 50000000
#define INPUT_SEQUENCE_29_HAS_IN 0
#define INPUT_SEQUENCE_29_HAS_OUT 1
#define INPUT_SEQUENCE_29_HAS_TRI 0
#define INPUT_SEQUENCE_29_IRQ_TYPE NONE
#define INPUT_SEQUENCE_29_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_28', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_28_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_28_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_28_COMPONENT_NAME input_sequence_28
#define INPUT_SEQUENCE_28_BASE 0x405d0
#define INPUT_SEQUENCE_28_SPAN 16
#define INPUT_SEQUENCE_28_END 0x405df
#define INPUT_SEQUENCE_28_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_28_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_28_CAPTURE 0
#define INPUT_SEQUENCE_28_DATA_WIDTH 32
#define INPUT_SEQUENCE_28_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_28_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_28_EDGE_TYPE NONE
#define INPUT_SEQUENCE_28_FREQ 50000000
#define INPUT_SEQUENCE_28_HAS_IN 0
#define INPUT_SEQUENCE_28_HAS_OUT 1
#define INPUT_SEQUENCE_28_HAS_TRI 0
#define INPUT_SEQUENCE_28_IRQ_TYPE NONE
#define INPUT_SEQUENCE_28_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_27', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_27_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_27_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_27_COMPONENT_NAME input_sequence_27
#define INPUT_SEQUENCE_27_BASE 0x405e0
#define INPUT_SEQUENCE_27_SPAN 16
#define INPUT_SEQUENCE_27_END 0x405ef
#define INPUT_SEQUENCE_27_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_27_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_27_CAPTURE 0
#define INPUT_SEQUENCE_27_DATA_WIDTH 32
#define INPUT_SEQUENCE_27_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_27_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_27_EDGE_TYPE NONE
#define INPUT_SEQUENCE_27_FREQ 50000000
#define INPUT_SEQUENCE_27_HAS_IN 0
#define INPUT_SEQUENCE_27_HAS_OUT 1
#define INPUT_SEQUENCE_27_HAS_TRI 0
#define INPUT_SEQUENCE_27_IRQ_TYPE NONE
#define INPUT_SEQUENCE_27_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_26', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_26_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_26_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_26_COMPONENT_NAME input_sequence_26
#define INPUT_SEQUENCE_26_BASE 0x405f0
#define INPUT_SEQUENCE_26_SPAN 16
#define INPUT_SEQUENCE_26_END 0x405ff
#define INPUT_SEQUENCE_26_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_26_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_26_CAPTURE 0
#define INPUT_SEQUENCE_26_DATA_WIDTH 32
#define INPUT_SEQUENCE_26_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_26_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_26_EDGE_TYPE NONE
#define INPUT_SEQUENCE_26_FREQ 50000000
#define INPUT_SEQUENCE_26_HAS_IN 0
#define INPUT_SEQUENCE_26_HAS_OUT 1
#define INPUT_SEQUENCE_26_HAS_TRI 0
#define INPUT_SEQUENCE_26_IRQ_TYPE NONE
#define INPUT_SEQUENCE_26_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_25', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_25_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_25_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_25_COMPONENT_NAME input_sequence_25
#define INPUT_SEQUENCE_25_BASE 0x40600
#define INPUT_SEQUENCE_25_SPAN 16
#define INPUT_SEQUENCE_25_END 0x4060f
#define INPUT_SEQUENCE_25_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_25_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_25_CAPTURE 0
#define INPUT_SEQUENCE_25_DATA_WIDTH 32
#define INPUT_SEQUENCE_25_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_25_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_25_EDGE_TYPE NONE
#define INPUT_SEQUENCE_25_FREQ 50000000
#define INPUT_SEQUENCE_25_HAS_IN 0
#define INPUT_SEQUENCE_25_HAS_OUT 1
#define INPUT_SEQUENCE_25_HAS_TRI 0
#define INPUT_SEQUENCE_25_IRQ_TYPE NONE
#define INPUT_SEQUENCE_25_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_24', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_24_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_24_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_24_COMPONENT_NAME input_sequence_24
#define INPUT_SEQUENCE_24_BASE 0x40610
#define INPUT_SEQUENCE_24_SPAN 16
#define INPUT_SEQUENCE_24_END 0x4061f
#define INPUT_SEQUENCE_24_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_24_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_24_CAPTURE 0
#define INPUT_SEQUENCE_24_DATA_WIDTH 32
#define INPUT_SEQUENCE_24_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_24_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_24_EDGE_TYPE NONE
#define INPUT_SEQUENCE_24_FREQ 50000000
#define INPUT_SEQUENCE_24_HAS_IN 0
#define INPUT_SEQUENCE_24_HAS_OUT 1
#define INPUT_SEQUENCE_24_HAS_TRI 0
#define INPUT_SEQUENCE_24_IRQ_TYPE NONE
#define INPUT_SEQUENCE_24_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_23', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_23_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_23_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_23_COMPONENT_NAME input_sequence_23
#define INPUT_SEQUENCE_23_BASE 0x40620
#define INPUT_SEQUENCE_23_SPAN 16
#define INPUT_SEQUENCE_23_END 0x4062f
#define INPUT_SEQUENCE_23_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_23_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_23_CAPTURE 0
#define INPUT_SEQUENCE_23_DATA_WIDTH 32
#define INPUT_SEQUENCE_23_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_23_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_23_EDGE_TYPE NONE
#define INPUT_SEQUENCE_23_FREQ 50000000
#define INPUT_SEQUENCE_23_HAS_IN 0
#define INPUT_SEQUENCE_23_HAS_OUT 1
#define INPUT_SEQUENCE_23_HAS_TRI 0
#define INPUT_SEQUENCE_23_IRQ_TYPE NONE
#define INPUT_SEQUENCE_23_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_22', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_22_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_22_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_22_COMPONENT_NAME input_sequence_22
#define INPUT_SEQUENCE_22_BASE 0x40630
#define INPUT_SEQUENCE_22_SPAN 16
#define INPUT_SEQUENCE_22_END 0x4063f
#define INPUT_SEQUENCE_22_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_22_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_22_CAPTURE 0
#define INPUT_SEQUENCE_22_DATA_WIDTH 32
#define INPUT_SEQUENCE_22_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_22_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_22_EDGE_TYPE NONE
#define INPUT_SEQUENCE_22_FREQ 50000000
#define INPUT_SEQUENCE_22_HAS_IN 0
#define INPUT_SEQUENCE_22_HAS_OUT 1
#define INPUT_SEQUENCE_22_HAS_TRI 0
#define INPUT_SEQUENCE_22_IRQ_TYPE NONE
#define INPUT_SEQUENCE_22_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_21', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_21_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_21_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_21_COMPONENT_NAME input_sequence_21
#define INPUT_SEQUENCE_21_BASE 0x40640
#define INPUT_SEQUENCE_21_SPAN 16
#define INPUT_SEQUENCE_21_END 0x4064f
#define INPUT_SEQUENCE_21_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_21_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_21_CAPTURE 0
#define INPUT_SEQUENCE_21_DATA_WIDTH 32
#define INPUT_SEQUENCE_21_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_21_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_21_EDGE_TYPE NONE
#define INPUT_SEQUENCE_21_FREQ 50000000
#define INPUT_SEQUENCE_21_HAS_IN 0
#define INPUT_SEQUENCE_21_HAS_OUT 1
#define INPUT_SEQUENCE_21_HAS_TRI 0
#define INPUT_SEQUENCE_21_IRQ_TYPE NONE
#define INPUT_SEQUENCE_21_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_20', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_20_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_20_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_20_COMPONENT_NAME input_sequence_20
#define INPUT_SEQUENCE_20_BASE 0x40650
#define INPUT_SEQUENCE_20_SPAN 16
#define INPUT_SEQUENCE_20_END 0x4065f
#define INPUT_SEQUENCE_20_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_20_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_20_CAPTURE 0
#define INPUT_SEQUENCE_20_DATA_WIDTH 32
#define INPUT_SEQUENCE_20_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_20_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_20_EDGE_TYPE NONE
#define INPUT_SEQUENCE_20_FREQ 50000000
#define INPUT_SEQUENCE_20_HAS_IN 0
#define INPUT_SEQUENCE_20_HAS_OUT 1
#define INPUT_SEQUENCE_20_HAS_TRI 0
#define INPUT_SEQUENCE_20_IRQ_TYPE NONE
#define INPUT_SEQUENCE_20_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_19', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_19_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_19_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_19_COMPONENT_NAME input_sequence_19
#define INPUT_SEQUENCE_19_BASE 0x40660
#define INPUT_SEQUENCE_19_SPAN 16
#define INPUT_SEQUENCE_19_END 0x4066f
#define INPUT_SEQUENCE_19_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_19_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_19_CAPTURE 0
#define INPUT_SEQUENCE_19_DATA_WIDTH 32
#define INPUT_SEQUENCE_19_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_19_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_19_EDGE_TYPE NONE
#define INPUT_SEQUENCE_19_FREQ 50000000
#define INPUT_SEQUENCE_19_HAS_IN 0
#define INPUT_SEQUENCE_19_HAS_OUT 1
#define INPUT_SEQUENCE_19_HAS_TRI 0
#define INPUT_SEQUENCE_19_IRQ_TYPE NONE
#define INPUT_SEQUENCE_19_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_18', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_18_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_18_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_18_COMPONENT_NAME input_sequence_18
#define INPUT_SEQUENCE_18_BASE 0x40670
#define INPUT_SEQUENCE_18_SPAN 16
#define INPUT_SEQUENCE_18_END 0x4067f
#define INPUT_SEQUENCE_18_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_18_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_18_CAPTURE 0
#define INPUT_SEQUENCE_18_DATA_WIDTH 32
#define INPUT_SEQUENCE_18_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_18_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_18_EDGE_TYPE NONE
#define INPUT_SEQUENCE_18_FREQ 50000000
#define INPUT_SEQUENCE_18_HAS_IN 0
#define INPUT_SEQUENCE_18_HAS_OUT 1
#define INPUT_SEQUENCE_18_HAS_TRI 0
#define INPUT_SEQUENCE_18_IRQ_TYPE NONE
#define INPUT_SEQUENCE_18_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_17', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_17_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_17_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_17_COMPONENT_NAME input_sequence_17
#define INPUT_SEQUENCE_17_BASE 0x40680
#define INPUT_SEQUENCE_17_SPAN 16
#define INPUT_SEQUENCE_17_END 0x4068f
#define INPUT_SEQUENCE_17_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_17_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_17_CAPTURE 0
#define INPUT_SEQUENCE_17_DATA_WIDTH 32
#define INPUT_SEQUENCE_17_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_17_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_17_EDGE_TYPE NONE
#define INPUT_SEQUENCE_17_FREQ 50000000
#define INPUT_SEQUENCE_17_HAS_IN 0
#define INPUT_SEQUENCE_17_HAS_OUT 1
#define INPUT_SEQUENCE_17_HAS_TRI 0
#define INPUT_SEQUENCE_17_IRQ_TYPE NONE
#define INPUT_SEQUENCE_17_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_16', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_16_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_16_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_16_COMPONENT_NAME input_sequence_16
#define INPUT_SEQUENCE_16_BASE 0x40690
#define INPUT_SEQUENCE_16_SPAN 16
#define INPUT_SEQUENCE_16_END 0x4069f
#define INPUT_SEQUENCE_16_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_16_CAPTURE 0
#define INPUT_SEQUENCE_16_DATA_WIDTH 32
#define INPUT_SEQUENCE_16_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_16_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_16_EDGE_TYPE NONE
#define INPUT_SEQUENCE_16_FREQ 50000000
#define INPUT_SEQUENCE_16_HAS_IN 0
#define INPUT_SEQUENCE_16_HAS_OUT 1
#define INPUT_SEQUENCE_16_HAS_TRI 0
#define INPUT_SEQUENCE_16_IRQ_TYPE NONE
#define INPUT_SEQUENCE_16_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_15', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_15_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_15_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_15_COMPONENT_NAME input_sequence_15
#define INPUT_SEQUENCE_15_BASE 0x406a0
#define INPUT_SEQUENCE_15_SPAN 16
#define INPUT_SEQUENCE_15_END 0x406af
#define INPUT_SEQUENCE_15_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_15_CAPTURE 0
#define INPUT_SEQUENCE_15_DATA_WIDTH 32
#define INPUT_SEQUENCE_15_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_15_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_15_EDGE_TYPE NONE
#define INPUT_SEQUENCE_15_FREQ 50000000
#define INPUT_SEQUENCE_15_HAS_IN 0
#define INPUT_SEQUENCE_15_HAS_OUT 1
#define INPUT_SEQUENCE_15_HAS_TRI 0
#define INPUT_SEQUENCE_15_IRQ_TYPE NONE
#define INPUT_SEQUENCE_15_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_14', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_14_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_14_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_14_COMPONENT_NAME input_sequence_14
#define INPUT_SEQUENCE_14_BASE 0x406b0
#define INPUT_SEQUENCE_14_SPAN 16
#define INPUT_SEQUENCE_14_END 0x406bf
#define INPUT_SEQUENCE_14_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_14_CAPTURE 0
#define INPUT_SEQUENCE_14_DATA_WIDTH 32
#define INPUT_SEQUENCE_14_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_14_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_14_EDGE_TYPE NONE
#define INPUT_SEQUENCE_14_FREQ 50000000
#define INPUT_SEQUENCE_14_HAS_IN 0
#define INPUT_SEQUENCE_14_HAS_OUT 1
#define INPUT_SEQUENCE_14_HAS_TRI 0
#define INPUT_SEQUENCE_14_IRQ_TYPE NONE
#define INPUT_SEQUENCE_14_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_13', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_13_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_13_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_13_COMPONENT_NAME input_sequence_13
#define INPUT_SEQUENCE_13_BASE 0x406c0
#define INPUT_SEQUENCE_13_SPAN 16
#define INPUT_SEQUENCE_13_END 0x406cf
#define INPUT_SEQUENCE_13_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_13_CAPTURE 0
#define INPUT_SEQUENCE_13_DATA_WIDTH 32
#define INPUT_SEQUENCE_13_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_13_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_13_EDGE_TYPE NONE
#define INPUT_SEQUENCE_13_FREQ 50000000
#define INPUT_SEQUENCE_13_HAS_IN 0
#define INPUT_SEQUENCE_13_HAS_OUT 1
#define INPUT_SEQUENCE_13_HAS_TRI 0
#define INPUT_SEQUENCE_13_IRQ_TYPE NONE
#define INPUT_SEQUENCE_13_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_12', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_12_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_12_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_12_COMPONENT_NAME input_sequence_12
#define INPUT_SEQUENCE_12_BASE 0x406d0
#define INPUT_SEQUENCE_12_SPAN 16
#define INPUT_SEQUENCE_12_END 0x406df
#define INPUT_SEQUENCE_12_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_12_CAPTURE 0
#define INPUT_SEQUENCE_12_DATA_WIDTH 32
#define INPUT_SEQUENCE_12_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_12_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_12_EDGE_TYPE NONE
#define INPUT_SEQUENCE_12_FREQ 50000000
#define INPUT_SEQUENCE_12_HAS_IN 0
#define INPUT_SEQUENCE_12_HAS_OUT 1
#define INPUT_SEQUENCE_12_HAS_TRI 0
#define INPUT_SEQUENCE_12_IRQ_TYPE NONE
#define INPUT_SEQUENCE_12_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_11', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_11_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_11_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_11_COMPONENT_NAME input_sequence_11
#define INPUT_SEQUENCE_11_BASE 0x406e0
#define INPUT_SEQUENCE_11_SPAN 16
#define INPUT_SEQUENCE_11_END 0x406ef
#define INPUT_SEQUENCE_11_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_11_CAPTURE 0
#define INPUT_SEQUENCE_11_DATA_WIDTH 32
#define INPUT_SEQUENCE_11_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_11_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_11_EDGE_TYPE NONE
#define INPUT_SEQUENCE_11_FREQ 50000000
#define INPUT_SEQUENCE_11_HAS_IN 0
#define INPUT_SEQUENCE_11_HAS_OUT 1
#define INPUT_SEQUENCE_11_HAS_TRI 0
#define INPUT_SEQUENCE_11_IRQ_TYPE NONE
#define INPUT_SEQUENCE_11_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_10', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_10_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_10_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_10_COMPONENT_NAME input_sequence_10
#define INPUT_SEQUENCE_10_BASE 0x406f0
#define INPUT_SEQUENCE_10_SPAN 16
#define INPUT_SEQUENCE_10_END 0x406ff
#define INPUT_SEQUENCE_10_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_10_CAPTURE 0
#define INPUT_SEQUENCE_10_DATA_WIDTH 32
#define INPUT_SEQUENCE_10_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_10_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_10_EDGE_TYPE NONE
#define INPUT_SEQUENCE_10_FREQ 50000000
#define INPUT_SEQUENCE_10_HAS_IN 0
#define INPUT_SEQUENCE_10_HAS_OUT 1
#define INPUT_SEQUENCE_10_HAS_TRI 0
#define INPUT_SEQUENCE_10_IRQ_TYPE NONE
#define INPUT_SEQUENCE_10_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_9', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_9_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_9_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_9_COMPONENT_NAME input_sequence_9
#define INPUT_SEQUENCE_9_BASE 0x40700
#define INPUT_SEQUENCE_9_SPAN 16
#define INPUT_SEQUENCE_9_END 0x4070f
#define INPUT_SEQUENCE_9_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_9_CAPTURE 0
#define INPUT_SEQUENCE_9_DATA_WIDTH 32
#define INPUT_SEQUENCE_9_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_9_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_9_EDGE_TYPE NONE
#define INPUT_SEQUENCE_9_FREQ 50000000
#define INPUT_SEQUENCE_9_HAS_IN 0
#define INPUT_SEQUENCE_9_HAS_OUT 1
#define INPUT_SEQUENCE_9_HAS_TRI 0
#define INPUT_SEQUENCE_9_IRQ_TYPE NONE
#define INPUT_SEQUENCE_9_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_8', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_8_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_8_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_8_COMPONENT_NAME input_sequence_8
#define INPUT_SEQUENCE_8_BASE 0x40710
#define INPUT_SEQUENCE_8_SPAN 16
#define INPUT_SEQUENCE_8_END 0x4071f
#define INPUT_SEQUENCE_8_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_8_CAPTURE 0
#define INPUT_SEQUENCE_8_DATA_WIDTH 32
#define INPUT_SEQUENCE_8_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_8_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_8_EDGE_TYPE NONE
#define INPUT_SEQUENCE_8_FREQ 50000000
#define INPUT_SEQUENCE_8_HAS_IN 0
#define INPUT_SEQUENCE_8_HAS_OUT 1
#define INPUT_SEQUENCE_8_HAS_TRI 0
#define INPUT_SEQUENCE_8_IRQ_TYPE NONE
#define INPUT_SEQUENCE_8_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_7_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_7_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_7_COMPONENT_NAME input_sequence_7
#define INPUT_SEQUENCE_7_BASE 0x40720
#define INPUT_SEQUENCE_7_SPAN 16
#define INPUT_SEQUENCE_7_END 0x4072f
#define INPUT_SEQUENCE_7_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_7_CAPTURE 0
#define INPUT_SEQUENCE_7_DATA_WIDTH 32
#define INPUT_SEQUENCE_7_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_7_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_7_EDGE_TYPE NONE
#define INPUT_SEQUENCE_7_FREQ 50000000
#define INPUT_SEQUENCE_7_HAS_IN 0
#define INPUT_SEQUENCE_7_HAS_OUT 1
#define INPUT_SEQUENCE_7_HAS_TRI 0
#define INPUT_SEQUENCE_7_IRQ_TYPE NONE
#define INPUT_SEQUENCE_7_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_6_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_6_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_6_COMPONENT_NAME input_sequence_6
#define INPUT_SEQUENCE_6_BASE 0x40730
#define INPUT_SEQUENCE_6_SPAN 16
#define INPUT_SEQUENCE_6_END 0x4073f
#define INPUT_SEQUENCE_6_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_6_CAPTURE 0
#define INPUT_SEQUENCE_6_DATA_WIDTH 32
#define INPUT_SEQUENCE_6_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_6_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_6_EDGE_TYPE NONE
#define INPUT_SEQUENCE_6_FREQ 50000000
#define INPUT_SEQUENCE_6_HAS_IN 0
#define INPUT_SEQUENCE_6_HAS_OUT 1
#define INPUT_SEQUENCE_6_HAS_TRI 0
#define INPUT_SEQUENCE_6_IRQ_TYPE NONE
#define INPUT_SEQUENCE_6_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_5_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_5_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_5_COMPONENT_NAME input_sequence_5
#define INPUT_SEQUENCE_5_BASE 0x40740
#define INPUT_SEQUENCE_5_SPAN 16
#define INPUT_SEQUENCE_5_END 0x4074f
#define INPUT_SEQUENCE_5_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_5_CAPTURE 0
#define INPUT_SEQUENCE_5_DATA_WIDTH 32
#define INPUT_SEQUENCE_5_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_5_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_5_EDGE_TYPE NONE
#define INPUT_SEQUENCE_5_FREQ 50000000
#define INPUT_SEQUENCE_5_HAS_IN 0
#define INPUT_SEQUENCE_5_HAS_OUT 1
#define INPUT_SEQUENCE_5_HAS_TRI 0
#define INPUT_SEQUENCE_5_IRQ_TYPE NONE
#define INPUT_SEQUENCE_5_RESET_VALUE 0

/*
 * Macros for device 'valid_output_31', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_31_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_31_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_31_COMPONENT_NAME valid_output_31
#define VALID_OUTPUT_31_BASE 0x40950
#define VALID_OUTPUT_31_SPAN 16
#define VALID_OUTPUT_31_END 0x4095f
#define VALID_OUTPUT_31_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_31_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_31_CAPTURE 0
#define VALID_OUTPUT_31_DATA_WIDTH 32
#define VALID_OUTPUT_31_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_31_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_31_EDGE_TYPE NONE
#define VALID_OUTPUT_31_FREQ 50000000
#define VALID_OUTPUT_31_HAS_IN 0
#define VALID_OUTPUT_31_HAS_OUT 1
#define VALID_OUTPUT_31_HAS_TRI 0
#define VALID_OUTPUT_31_IRQ_TYPE NONE
#define VALID_OUTPUT_31_RESET_VALUE 0

/*
 * Macros for device 'valid_output_30', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_30_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_30_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_30_COMPONENT_NAME valid_output_30
#define VALID_OUTPUT_30_BASE 0x40960
#define VALID_OUTPUT_30_SPAN 16
#define VALID_OUTPUT_30_END 0x4096f
#define VALID_OUTPUT_30_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_30_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_30_CAPTURE 0
#define VALID_OUTPUT_30_DATA_WIDTH 32
#define VALID_OUTPUT_30_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_30_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_30_EDGE_TYPE NONE
#define VALID_OUTPUT_30_FREQ 50000000
#define VALID_OUTPUT_30_HAS_IN 0
#define VALID_OUTPUT_30_HAS_OUT 1
#define VALID_OUTPUT_30_HAS_TRI 0
#define VALID_OUTPUT_30_IRQ_TYPE NONE
#define VALID_OUTPUT_30_RESET_VALUE 0

/*
 * Macros for device 'valid_output_29', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_29_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_29_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_29_COMPONENT_NAME valid_output_29
#define VALID_OUTPUT_29_BASE 0x40970
#define VALID_OUTPUT_29_SPAN 16
#define VALID_OUTPUT_29_END 0x4097f
#define VALID_OUTPUT_29_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_29_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_29_CAPTURE 0
#define VALID_OUTPUT_29_DATA_WIDTH 32
#define VALID_OUTPUT_29_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_29_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_29_EDGE_TYPE NONE
#define VALID_OUTPUT_29_FREQ 50000000
#define VALID_OUTPUT_29_HAS_IN 0
#define VALID_OUTPUT_29_HAS_OUT 1
#define VALID_OUTPUT_29_HAS_TRI 0
#define VALID_OUTPUT_29_IRQ_TYPE NONE
#define VALID_OUTPUT_29_RESET_VALUE 0

/*
 * Macros for device 'valid_output_28', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_28_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_28_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_28_COMPONENT_NAME valid_output_28
#define VALID_OUTPUT_28_BASE 0x40980
#define VALID_OUTPUT_28_SPAN 16
#define VALID_OUTPUT_28_END 0x4098f
#define VALID_OUTPUT_28_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_28_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_28_CAPTURE 0
#define VALID_OUTPUT_28_DATA_WIDTH 32
#define VALID_OUTPUT_28_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_28_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_28_EDGE_TYPE NONE
#define VALID_OUTPUT_28_FREQ 50000000
#define VALID_OUTPUT_28_HAS_IN 0
#define VALID_OUTPUT_28_HAS_OUT 1
#define VALID_OUTPUT_28_HAS_TRI 0
#define VALID_OUTPUT_28_IRQ_TYPE NONE
#define VALID_OUTPUT_28_RESET_VALUE 0

/*
 * Macros for device 'valid_output_27', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_27_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_27_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_27_COMPONENT_NAME valid_output_27
#define VALID_OUTPUT_27_BASE 0x40990
#define VALID_OUTPUT_27_SPAN 16
#define VALID_OUTPUT_27_END 0x4099f
#define VALID_OUTPUT_27_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_27_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_27_CAPTURE 0
#define VALID_OUTPUT_27_DATA_WIDTH 32
#define VALID_OUTPUT_27_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_27_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_27_EDGE_TYPE NONE
#define VALID_OUTPUT_27_FREQ 50000000
#define VALID_OUTPUT_27_HAS_IN 0
#define VALID_OUTPUT_27_HAS_OUT 1
#define VALID_OUTPUT_27_HAS_TRI 0
#define VALID_OUTPUT_27_IRQ_TYPE NONE
#define VALID_OUTPUT_27_RESET_VALUE 0

/*
 * Macros for device 'valid_output_26', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_26_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_26_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_26_COMPONENT_NAME valid_output_26
#define VALID_OUTPUT_26_BASE 0x409a0
#define VALID_OUTPUT_26_SPAN 16
#define VALID_OUTPUT_26_END 0x409af
#define VALID_OUTPUT_26_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_26_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_26_CAPTURE 0
#define VALID_OUTPUT_26_DATA_WIDTH 32
#define VALID_OUTPUT_26_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_26_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_26_EDGE_TYPE NONE
#define VALID_OUTPUT_26_FREQ 50000000
#define VALID_OUTPUT_26_HAS_IN 0
#define VALID_OUTPUT_26_HAS_OUT 1
#define VALID_OUTPUT_26_HAS_TRI 0
#define VALID_OUTPUT_26_IRQ_TYPE NONE
#define VALID_OUTPUT_26_RESET_VALUE 0

/*
 * Macros for device 'valid_output_25', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_25_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_25_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_25_COMPONENT_NAME valid_output_25
#define VALID_OUTPUT_25_BASE 0x409c0
#define VALID_OUTPUT_25_SPAN 16
#define VALID_OUTPUT_25_END 0x409cf
#define VALID_OUTPUT_25_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_25_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_25_CAPTURE 0
#define VALID_OUTPUT_25_DATA_WIDTH 32
#define VALID_OUTPUT_25_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_25_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_25_EDGE_TYPE NONE
#define VALID_OUTPUT_25_FREQ 50000000
#define VALID_OUTPUT_25_HAS_IN 0
#define VALID_OUTPUT_25_HAS_OUT 1
#define VALID_OUTPUT_25_HAS_TRI 0
#define VALID_OUTPUT_25_IRQ_TYPE NONE
#define VALID_OUTPUT_25_RESET_VALUE 0

/*
 * Macros for device 'valid_output_24', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_24_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_24_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_24_COMPONENT_NAME valid_output_24
#define VALID_OUTPUT_24_BASE 0x409d0
#define VALID_OUTPUT_24_SPAN 16
#define VALID_OUTPUT_24_END 0x409df
#define VALID_OUTPUT_24_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_24_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_24_CAPTURE 0
#define VALID_OUTPUT_24_DATA_WIDTH 32
#define VALID_OUTPUT_24_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_24_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_24_EDGE_TYPE NONE
#define VALID_OUTPUT_24_FREQ 50000000
#define VALID_OUTPUT_24_HAS_IN 0
#define VALID_OUTPUT_24_HAS_OUT 1
#define VALID_OUTPUT_24_HAS_TRI 0
#define VALID_OUTPUT_24_IRQ_TYPE NONE
#define VALID_OUTPUT_24_RESET_VALUE 0

/*
 * Macros for device 'valid_output_23', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_23_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_23_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_23_COMPONENT_NAME valid_output_23
#define VALID_OUTPUT_23_BASE 0x409e0
#define VALID_OUTPUT_23_SPAN 16
#define VALID_OUTPUT_23_END 0x409ef
#define VALID_OUTPUT_23_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_23_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_23_CAPTURE 0
#define VALID_OUTPUT_23_DATA_WIDTH 32
#define VALID_OUTPUT_23_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_23_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_23_EDGE_TYPE NONE
#define VALID_OUTPUT_23_FREQ 50000000
#define VALID_OUTPUT_23_HAS_IN 0
#define VALID_OUTPUT_23_HAS_OUT 1
#define VALID_OUTPUT_23_HAS_TRI 0
#define VALID_OUTPUT_23_IRQ_TYPE NONE
#define VALID_OUTPUT_23_RESET_VALUE 0

/*
 * Macros for device 'valid_output_22', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_22_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_22_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_22_COMPONENT_NAME valid_output_22
#define VALID_OUTPUT_22_BASE 0x409f0
#define VALID_OUTPUT_22_SPAN 16
#define VALID_OUTPUT_22_END 0x409ff
#define VALID_OUTPUT_22_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_22_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_22_CAPTURE 0
#define VALID_OUTPUT_22_DATA_WIDTH 32
#define VALID_OUTPUT_22_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_22_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_22_EDGE_TYPE NONE
#define VALID_OUTPUT_22_FREQ 50000000
#define VALID_OUTPUT_22_HAS_IN 0
#define VALID_OUTPUT_22_HAS_OUT 1
#define VALID_OUTPUT_22_HAS_TRI 0
#define VALID_OUTPUT_22_IRQ_TYPE NONE
#define VALID_OUTPUT_22_RESET_VALUE 0

/*
 * Macros for device 'valid_output_21', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_21_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_21_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_21_COMPONENT_NAME valid_output_21
#define VALID_OUTPUT_21_BASE 0x40a00
#define VALID_OUTPUT_21_SPAN 16
#define VALID_OUTPUT_21_END 0x40a0f
#define VALID_OUTPUT_21_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_21_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_21_CAPTURE 0
#define VALID_OUTPUT_21_DATA_WIDTH 32
#define VALID_OUTPUT_21_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_21_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_21_EDGE_TYPE NONE
#define VALID_OUTPUT_21_FREQ 50000000
#define VALID_OUTPUT_21_HAS_IN 0
#define VALID_OUTPUT_21_HAS_OUT 1
#define VALID_OUTPUT_21_HAS_TRI 0
#define VALID_OUTPUT_21_IRQ_TYPE NONE
#define VALID_OUTPUT_21_RESET_VALUE 0

/*
 * Macros for device 'valid_output_20', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_20_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_20_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_20_COMPONENT_NAME valid_output_20
#define VALID_OUTPUT_20_BASE 0x40a10
#define VALID_OUTPUT_20_SPAN 16
#define VALID_OUTPUT_20_END 0x40a1f
#define VALID_OUTPUT_20_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_20_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_20_CAPTURE 0
#define VALID_OUTPUT_20_DATA_WIDTH 32
#define VALID_OUTPUT_20_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_20_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_20_EDGE_TYPE NONE
#define VALID_OUTPUT_20_FREQ 50000000
#define VALID_OUTPUT_20_HAS_IN 0
#define VALID_OUTPUT_20_HAS_OUT 1
#define VALID_OUTPUT_20_HAS_TRI 0
#define VALID_OUTPUT_20_IRQ_TYPE NONE
#define VALID_OUTPUT_20_RESET_VALUE 0

/*
 * Macros for device 'valid_output_19', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_19_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_19_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_19_COMPONENT_NAME valid_output_19
#define VALID_OUTPUT_19_BASE 0x40a20
#define VALID_OUTPUT_19_SPAN 16
#define VALID_OUTPUT_19_END 0x40a2f
#define VALID_OUTPUT_19_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_19_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_19_CAPTURE 0
#define VALID_OUTPUT_19_DATA_WIDTH 32
#define VALID_OUTPUT_19_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_19_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_19_EDGE_TYPE NONE
#define VALID_OUTPUT_19_FREQ 50000000
#define VALID_OUTPUT_19_HAS_IN 0
#define VALID_OUTPUT_19_HAS_OUT 1
#define VALID_OUTPUT_19_HAS_TRI 0
#define VALID_OUTPUT_19_IRQ_TYPE NONE
#define VALID_OUTPUT_19_RESET_VALUE 0

/*
 * Macros for device 'valid_output_18', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_18_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_18_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_18_COMPONENT_NAME valid_output_18
#define VALID_OUTPUT_18_BASE 0x40a30
#define VALID_OUTPUT_18_SPAN 16
#define VALID_OUTPUT_18_END 0x40a3f
#define VALID_OUTPUT_18_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_18_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_18_CAPTURE 0
#define VALID_OUTPUT_18_DATA_WIDTH 32
#define VALID_OUTPUT_18_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_18_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_18_EDGE_TYPE NONE
#define VALID_OUTPUT_18_FREQ 50000000
#define VALID_OUTPUT_18_HAS_IN 0
#define VALID_OUTPUT_18_HAS_OUT 1
#define VALID_OUTPUT_18_HAS_TRI 0
#define VALID_OUTPUT_18_IRQ_TYPE NONE
#define VALID_OUTPUT_18_RESET_VALUE 0

/*
 * Macros for device 'valid_output_17', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_17_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_17_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_17_COMPONENT_NAME valid_output_17
#define VALID_OUTPUT_17_BASE 0x40a40
#define VALID_OUTPUT_17_SPAN 16
#define VALID_OUTPUT_17_END 0x40a4f
#define VALID_OUTPUT_17_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_17_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_17_CAPTURE 0
#define VALID_OUTPUT_17_DATA_WIDTH 32
#define VALID_OUTPUT_17_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_17_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_17_EDGE_TYPE NONE
#define VALID_OUTPUT_17_FREQ 50000000
#define VALID_OUTPUT_17_HAS_IN 0
#define VALID_OUTPUT_17_HAS_OUT 1
#define VALID_OUTPUT_17_HAS_TRI 0
#define VALID_OUTPUT_17_IRQ_TYPE NONE
#define VALID_OUTPUT_17_RESET_VALUE 0

/*
 * Macros for device 'valid_output_16', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_16_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_16_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_16_COMPONENT_NAME valid_output_16
#define VALID_OUTPUT_16_BASE 0x40a50
#define VALID_OUTPUT_16_SPAN 16
#define VALID_OUTPUT_16_END 0x40a5f
#define VALID_OUTPUT_16_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_16_CAPTURE 0
#define VALID_OUTPUT_16_DATA_WIDTH 32
#define VALID_OUTPUT_16_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_16_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_16_EDGE_TYPE NONE
#define VALID_OUTPUT_16_FREQ 50000000
#define VALID_OUTPUT_16_HAS_IN 0
#define VALID_OUTPUT_16_HAS_OUT 1
#define VALID_OUTPUT_16_HAS_TRI 0
#define VALID_OUTPUT_16_IRQ_TYPE NONE
#define VALID_OUTPUT_16_RESET_VALUE 0

/*
 * Macros for device 'valid_output_15', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_15_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_15_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_15_COMPONENT_NAME valid_output_15
#define VALID_OUTPUT_15_BASE 0x40a60
#define VALID_OUTPUT_15_SPAN 16
#define VALID_OUTPUT_15_END 0x40a6f
#define VALID_OUTPUT_15_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_15_CAPTURE 0
#define VALID_OUTPUT_15_DATA_WIDTH 32
#define VALID_OUTPUT_15_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_15_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_15_EDGE_TYPE NONE
#define VALID_OUTPUT_15_FREQ 50000000
#define VALID_OUTPUT_15_HAS_IN 0
#define VALID_OUTPUT_15_HAS_OUT 1
#define VALID_OUTPUT_15_HAS_TRI 0
#define VALID_OUTPUT_15_IRQ_TYPE NONE
#define VALID_OUTPUT_15_RESET_VALUE 0

/*
 * Macros for device 'valid_output_14', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_14_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_14_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_14_COMPONENT_NAME valid_output_14
#define VALID_OUTPUT_14_BASE 0x40a70
#define VALID_OUTPUT_14_SPAN 16
#define VALID_OUTPUT_14_END 0x40a7f
#define VALID_OUTPUT_14_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_14_CAPTURE 0
#define VALID_OUTPUT_14_DATA_WIDTH 32
#define VALID_OUTPUT_14_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_14_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_14_EDGE_TYPE NONE
#define VALID_OUTPUT_14_FREQ 50000000
#define VALID_OUTPUT_14_HAS_IN 0
#define VALID_OUTPUT_14_HAS_OUT 1
#define VALID_OUTPUT_14_HAS_TRI 0
#define VALID_OUTPUT_14_IRQ_TYPE NONE
#define VALID_OUTPUT_14_RESET_VALUE 0

/*
 * Macros for device 'valid_output_13', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_13_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_13_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_13_COMPONENT_NAME valid_output_13
#define VALID_OUTPUT_13_BASE 0x40a80
#define VALID_OUTPUT_13_SPAN 16
#define VALID_OUTPUT_13_END 0x40a8f
#define VALID_OUTPUT_13_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_13_CAPTURE 0
#define VALID_OUTPUT_13_DATA_WIDTH 32
#define VALID_OUTPUT_13_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_13_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_13_EDGE_TYPE NONE
#define VALID_OUTPUT_13_FREQ 50000000
#define VALID_OUTPUT_13_HAS_IN 0
#define VALID_OUTPUT_13_HAS_OUT 1
#define VALID_OUTPUT_13_HAS_TRI 0
#define VALID_OUTPUT_13_IRQ_TYPE NONE
#define VALID_OUTPUT_13_RESET_VALUE 0

/*
 * Macros for device 'valid_output_12', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_12_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_12_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_12_COMPONENT_NAME valid_output_12
#define VALID_OUTPUT_12_BASE 0x40a90
#define VALID_OUTPUT_12_SPAN 16
#define VALID_OUTPUT_12_END 0x40a9f
#define VALID_OUTPUT_12_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_12_CAPTURE 0
#define VALID_OUTPUT_12_DATA_WIDTH 32
#define VALID_OUTPUT_12_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_12_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_12_EDGE_TYPE NONE
#define VALID_OUTPUT_12_FREQ 50000000
#define VALID_OUTPUT_12_HAS_IN 0
#define VALID_OUTPUT_12_HAS_OUT 1
#define VALID_OUTPUT_12_HAS_TRI 0
#define VALID_OUTPUT_12_IRQ_TYPE NONE
#define VALID_OUTPUT_12_RESET_VALUE 0

/*
 * Macros for device 'valid_output_11', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_11_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_11_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_11_COMPONENT_NAME valid_output_11
#define VALID_OUTPUT_11_BASE 0x40aa0
#define VALID_OUTPUT_11_SPAN 16
#define VALID_OUTPUT_11_END 0x40aaf
#define VALID_OUTPUT_11_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_11_CAPTURE 0
#define VALID_OUTPUT_11_DATA_WIDTH 32
#define VALID_OUTPUT_11_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_11_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_11_EDGE_TYPE NONE
#define VALID_OUTPUT_11_FREQ 50000000
#define VALID_OUTPUT_11_HAS_IN 0
#define VALID_OUTPUT_11_HAS_OUT 1
#define VALID_OUTPUT_11_HAS_TRI 0
#define VALID_OUTPUT_11_IRQ_TYPE NONE
#define VALID_OUTPUT_11_RESET_VALUE 0

/*
 * Macros for device 'valid_output_10', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_10_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_10_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_10_COMPONENT_NAME valid_output_10
#define VALID_OUTPUT_10_BASE 0x40ab0
#define VALID_OUTPUT_10_SPAN 16
#define VALID_OUTPUT_10_END 0x40abf
#define VALID_OUTPUT_10_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_10_CAPTURE 0
#define VALID_OUTPUT_10_DATA_WIDTH 32
#define VALID_OUTPUT_10_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_10_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_10_EDGE_TYPE NONE
#define VALID_OUTPUT_10_FREQ 50000000
#define VALID_OUTPUT_10_HAS_IN 0
#define VALID_OUTPUT_10_HAS_OUT 1
#define VALID_OUTPUT_10_HAS_TRI 0
#define VALID_OUTPUT_10_IRQ_TYPE NONE
#define VALID_OUTPUT_10_RESET_VALUE 0

/*
 * Macros for device 'valid_output_9', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_9_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_9_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_9_COMPONENT_NAME valid_output_9
#define VALID_OUTPUT_9_BASE 0x40ac0
#define VALID_OUTPUT_9_SPAN 16
#define VALID_OUTPUT_9_END 0x40acf
#define VALID_OUTPUT_9_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_9_CAPTURE 0
#define VALID_OUTPUT_9_DATA_WIDTH 32
#define VALID_OUTPUT_9_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_9_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_9_EDGE_TYPE NONE
#define VALID_OUTPUT_9_FREQ 50000000
#define VALID_OUTPUT_9_HAS_IN 0
#define VALID_OUTPUT_9_HAS_OUT 1
#define VALID_OUTPUT_9_HAS_TRI 0
#define VALID_OUTPUT_9_IRQ_TYPE NONE
#define VALID_OUTPUT_9_RESET_VALUE 0

/*
 * Macros for device 'valid_output_8', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_8_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_8_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_8_COMPONENT_NAME valid_output_8
#define VALID_OUTPUT_8_BASE 0x40ad0
#define VALID_OUTPUT_8_SPAN 16
#define VALID_OUTPUT_8_END 0x40adf
#define VALID_OUTPUT_8_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_8_CAPTURE 0
#define VALID_OUTPUT_8_DATA_WIDTH 32
#define VALID_OUTPUT_8_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_8_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_8_EDGE_TYPE NONE
#define VALID_OUTPUT_8_FREQ 50000000
#define VALID_OUTPUT_8_HAS_IN 0
#define VALID_OUTPUT_8_HAS_OUT 1
#define VALID_OUTPUT_8_HAS_TRI 0
#define VALID_OUTPUT_8_IRQ_TYPE NONE
#define VALID_OUTPUT_8_RESET_VALUE 0

/*
 * Macros for device 'valid_output_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_7_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_7_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_7_COMPONENT_NAME valid_output_7
#define VALID_OUTPUT_7_BASE 0x40ae0
#define VALID_OUTPUT_7_SPAN 16
#define VALID_OUTPUT_7_END 0x40aef
#define VALID_OUTPUT_7_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_7_CAPTURE 0
#define VALID_OUTPUT_7_DATA_WIDTH 32
#define VALID_OUTPUT_7_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_7_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_7_EDGE_TYPE NONE
#define VALID_OUTPUT_7_FREQ 50000000
#define VALID_OUTPUT_7_HAS_IN 0
#define VALID_OUTPUT_7_HAS_OUT 1
#define VALID_OUTPUT_7_HAS_TRI 0
#define VALID_OUTPUT_7_IRQ_TYPE NONE
#define VALID_OUTPUT_7_RESET_VALUE 0

/*
 * Macros for device 'valid_output_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_6_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_6_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_6_COMPONENT_NAME valid_output_6
#define VALID_OUTPUT_6_BASE 0x40af0
#define VALID_OUTPUT_6_SPAN 16
#define VALID_OUTPUT_6_END 0x40aff
#define VALID_OUTPUT_6_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_6_CAPTURE 0
#define VALID_OUTPUT_6_DATA_WIDTH 32
#define VALID_OUTPUT_6_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_6_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_6_EDGE_TYPE NONE
#define VALID_OUTPUT_6_FREQ 50000000
#define VALID_OUTPUT_6_HAS_IN 0
#define VALID_OUTPUT_6_HAS_OUT 1
#define VALID_OUTPUT_6_HAS_TRI 0
#define VALID_OUTPUT_6_IRQ_TYPE NONE
#define VALID_OUTPUT_6_RESET_VALUE 0

/*
 * Macros for device 'valid_output_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_5_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_5_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_5_COMPONENT_NAME valid_output_5
#define VALID_OUTPUT_5_BASE 0x40b00
#define VALID_OUTPUT_5_SPAN 16
#define VALID_OUTPUT_5_END 0x40b0f
#define VALID_OUTPUT_5_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_5_CAPTURE 0
#define VALID_OUTPUT_5_DATA_WIDTH 32
#define VALID_OUTPUT_5_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_5_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_5_EDGE_TYPE NONE
#define VALID_OUTPUT_5_FREQ 50000000
#define VALID_OUTPUT_5_HAS_IN 0
#define VALID_OUTPUT_5_HAS_OUT 1
#define VALID_OUTPUT_5_HAS_TRI 0
#define VALID_OUTPUT_5_IRQ_TYPE NONE
#define VALID_OUTPUT_5_RESET_VALUE 0

/*
 * Macros for device 'sequences_to_process', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEQUENCES_TO_PROCESS_'.
 * The prefix is the slave descriptor.
 */
#define SEQUENCES_TO_PROCESS_COMPONENT_TYPE altera_avalon_pio
#define SEQUENCES_TO_PROCESS_COMPONENT_NAME sequences_to_process
#define SEQUENCES_TO_PROCESS_BASE 0x40b10
#define SEQUENCES_TO_PROCESS_SPAN 16
#define SEQUENCES_TO_PROCESS_END 0x40b1f
#define SEQUENCES_TO_PROCESS_BIT_CLEARING_EDGE_REGISTER 0
#define SEQUENCES_TO_PROCESS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEQUENCES_TO_PROCESS_CAPTURE 0
#define SEQUENCES_TO_PROCESS_DATA_WIDTH 32
#define SEQUENCES_TO_PROCESS_DO_TEST_BENCH_WIRING 0
#define SEQUENCES_TO_PROCESS_DRIVEN_SIM_VALUE 0
#define SEQUENCES_TO_PROCESS_EDGE_TYPE NONE
#define SEQUENCES_TO_PROCESS_FREQ 50000000
#define SEQUENCES_TO_PROCESS_HAS_IN 0
#define SEQUENCES_TO_PROCESS_HAS_OUT 1
#define SEQUENCES_TO_PROCESS_HAS_TRI 0
#define SEQUENCES_TO_PROCESS_IRQ_TYPE NONE
#define SEQUENCES_TO_PROCESS_RESET_VALUE 0

/*
 * Macros for device 'valid_output_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_4_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_4_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_4_COMPONENT_NAME valid_output_4
#define VALID_OUTPUT_4_BASE 0x40b20
#define VALID_OUTPUT_4_SPAN 16
#define VALID_OUTPUT_4_END 0x40b2f
#define VALID_OUTPUT_4_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_4_CAPTURE 0
#define VALID_OUTPUT_4_DATA_WIDTH 32
#define VALID_OUTPUT_4_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_4_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_4_EDGE_TYPE NONE
#define VALID_OUTPUT_4_FREQ 50000000
#define VALID_OUTPUT_4_HAS_IN 0
#define VALID_OUTPUT_4_HAS_OUT 1
#define VALID_OUTPUT_4_HAS_TRI 0
#define VALID_OUTPUT_4_IRQ_TYPE NONE
#define VALID_OUTPUT_4_RESET_VALUE 0

/*
 * Macros for device 'expected_output_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_4_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_4_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_4_COMPONENT_NAME expected_output_4
#define EXPECTED_OUTPUT_4_BASE 0x40b30
#define EXPECTED_OUTPUT_4_SPAN 16
#define EXPECTED_OUTPUT_4_END 0x40b3f
#define EXPECTED_OUTPUT_4_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_4_CAPTURE 0
#define EXPECTED_OUTPUT_4_DATA_WIDTH 32
#define EXPECTED_OUTPUT_4_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_4_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_4_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_4_FREQ 50000000
#define EXPECTED_OUTPUT_4_HAS_IN 0
#define EXPECTED_OUTPUT_4_HAS_OUT 1
#define EXPECTED_OUTPUT_4_HAS_TRI 0
#define EXPECTED_OUTPUT_4_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_4_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_4_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_4_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_4_COMPONENT_NAME input_sequence_4
#define INPUT_SEQUENCE_4_BASE 0x40b40
#define INPUT_SEQUENCE_4_SPAN 16
#define INPUT_SEQUENCE_4_END 0x40b4f
#define INPUT_SEQUENCE_4_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_4_CAPTURE 0
#define INPUT_SEQUENCE_4_DATA_WIDTH 32
#define INPUT_SEQUENCE_4_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_4_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_4_EDGE_TYPE NONE
#define INPUT_SEQUENCE_4_FREQ 50000000
#define INPUT_SEQUENCE_4_HAS_IN 0
#define INPUT_SEQUENCE_4_HAS_OUT 1
#define INPUT_SEQUENCE_4_HAS_TRI 0
#define INPUT_SEQUENCE_4_IRQ_TYPE NONE
#define INPUT_SEQUENCE_4_RESET_VALUE 0

/*
 * Macros for device 'valid_output_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_3_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_3_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_3_COMPONENT_NAME valid_output_3
#define VALID_OUTPUT_3_BASE 0x40b50
#define VALID_OUTPUT_3_SPAN 16
#define VALID_OUTPUT_3_END 0x40b5f
#define VALID_OUTPUT_3_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_3_CAPTURE 0
#define VALID_OUTPUT_3_DATA_WIDTH 32
#define VALID_OUTPUT_3_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_3_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_3_EDGE_TYPE NONE
#define VALID_OUTPUT_3_FREQ 50000000
#define VALID_OUTPUT_3_HAS_IN 0
#define VALID_OUTPUT_3_HAS_OUT 1
#define VALID_OUTPUT_3_HAS_TRI 0
#define VALID_OUTPUT_3_IRQ_TYPE NONE
#define VALID_OUTPUT_3_RESET_VALUE 0

/*
 * Macros for device 'valid_output_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_2_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_2_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_2_COMPONENT_NAME valid_output_2
#define VALID_OUTPUT_2_BASE 0x40b60
#define VALID_OUTPUT_2_SPAN 16
#define VALID_OUTPUT_2_END 0x40b6f
#define VALID_OUTPUT_2_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_2_CAPTURE 0
#define VALID_OUTPUT_2_DATA_WIDTH 32
#define VALID_OUTPUT_2_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_2_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_2_EDGE_TYPE NONE
#define VALID_OUTPUT_2_FREQ 50000000
#define VALID_OUTPUT_2_HAS_IN 0
#define VALID_OUTPUT_2_HAS_OUT 1
#define VALID_OUTPUT_2_HAS_TRI 0
#define VALID_OUTPUT_2_IRQ_TYPE NONE
#define VALID_OUTPUT_2_RESET_VALUE 0

/*
 * Macros for device 'valid_output_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_1_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_1_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_1_COMPONENT_NAME valid_output_1
#define VALID_OUTPUT_1_BASE 0x40b70
#define VALID_OUTPUT_1_SPAN 16
#define VALID_OUTPUT_1_END 0x40b7f
#define VALID_OUTPUT_1_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_1_CAPTURE 0
#define VALID_OUTPUT_1_DATA_WIDTH 32
#define VALID_OUTPUT_1_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_1_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_1_EDGE_TYPE NONE
#define VALID_OUTPUT_1_FREQ 50000000
#define VALID_OUTPUT_1_HAS_IN 0
#define VALID_OUTPUT_1_HAS_OUT 1
#define VALID_OUTPUT_1_HAS_TRI 0
#define VALID_OUTPUT_1_IRQ_TYPE NONE
#define VALID_OUTPUT_1_RESET_VALUE 0

/*
 * Macros for device 'valid_output_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'VALID_OUTPUT_0_'.
 * The prefix is the slave descriptor.
 */
#define VALID_OUTPUT_0_COMPONENT_TYPE altera_avalon_pio
#define VALID_OUTPUT_0_COMPONENT_NAME valid_output_0
#define VALID_OUTPUT_0_BASE 0x40b80
#define VALID_OUTPUT_0_SPAN 16
#define VALID_OUTPUT_0_END 0x40b8f
#define VALID_OUTPUT_0_BIT_CLEARING_EDGE_REGISTER 0
#define VALID_OUTPUT_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define VALID_OUTPUT_0_CAPTURE 0
#define VALID_OUTPUT_0_DATA_WIDTH 32
#define VALID_OUTPUT_0_DO_TEST_BENCH_WIRING 0
#define VALID_OUTPUT_0_DRIVEN_SIM_VALUE 0
#define VALID_OUTPUT_0_EDGE_TYPE NONE
#define VALID_OUTPUT_0_FREQ 50000000
#define VALID_OUTPUT_0_HAS_IN 0
#define VALID_OUTPUT_0_HAS_OUT 1
#define VALID_OUTPUT_0_HAS_TRI 0
#define VALID_OUTPUT_0_IRQ_TYPE NONE
#define VALID_OUTPUT_0_RESET_VALUE 0

/*
 * Macros for device 'expected_output_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_3_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_3_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_3_COMPONENT_NAME expected_output_3
#define EXPECTED_OUTPUT_3_BASE 0x40b90
#define EXPECTED_OUTPUT_3_SPAN 16
#define EXPECTED_OUTPUT_3_END 0x40b9f
#define EXPECTED_OUTPUT_3_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_3_CAPTURE 0
#define EXPECTED_OUTPUT_3_DATA_WIDTH 32
#define EXPECTED_OUTPUT_3_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_3_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_3_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_3_FREQ 50000000
#define EXPECTED_OUTPUT_3_HAS_IN 0
#define EXPECTED_OUTPUT_3_HAS_OUT 1
#define EXPECTED_OUTPUT_3_HAS_TRI 0
#define EXPECTED_OUTPUT_3_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_3_RESET_VALUE 0

/*
 * Macros for device 'expected_output_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_2_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_2_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_2_COMPONENT_NAME expected_output_2
#define EXPECTED_OUTPUT_2_BASE 0x40ba0
#define EXPECTED_OUTPUT_2_SPAN 16
#define EXPECTED_OUTPUT_2_END 0x40baf
#define EXPECTED_OUTPUT_2_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_2_CAPTURE 0
#define EXPECTED_OUTPUT_2_DATA_WIDTH 32
#define EXPECTED_OUTPUT_2_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_2_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_2_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_2_FREQ 50000000
#define EXPECTED_OUTPUT_2_HAS_IN 0
#define EXPECTED_OUTPUT_2_HAS_OUT 1
#define EXPECTED_OUTPUT_2_HAS_TRI 0
#define EXPECTED_OUTPUT_2_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_2_RESET_VALUE 0

/*
 * Macros for device 'expected_output_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_1_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_1_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_1_COMPONENT_NAME expected_output_1
#define EXPECTED_OUTPUT_1_BASE 0x40bb0
#define EXPECTED_OUTPUT_1_SPAN 16
#define EXPECTED_OUTPUT_1_END 0x40bbf
#define EXPECTED_OUTPUT_1_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_1_CAPTURE 0
#define EXPECTED_OUTPUT_1_DATA_WIDTH 32
#define EXPECTED_OUTPUT_1_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_1_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_1_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_1_FREQ 50000000
#define EXPECTED_OUTPUT_1_HAS_IN 0
#define EXPECTED_OUTPUT_1_HAS_OUT 1
#define EXPECTED_OUTPUT_1_HAS_TRI 0
#define EXPECTED_OUTPUT_1_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_1_RESET_VALUE 0

/*
 * Macros for device 'expected_output_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_OUTPUT_0_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_OUTPUT_0_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_OUTPUT_0_COMPONENT_NAME expected_output_0
#define EXPECTED_OUTPUT_0_BASE 0x40bc0
#define EXPECTED_OUTPUT_0_SPAN 16
#define EXPECTED_OUTPUT_0_END 0x40bcf
#define EXPECTED_OUTPUT_0_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_OUTPUT_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_OUTPUT_0_CAPTURE 0
#define EXPECTED_OUTPUT_0_DATA_WIDTH 32
#define EXPECTED_OUTPUT_0_DO_TEST_BENCH_WIRING 0
#define EXPECTED_OUTPUT_0_DRIVEN_SIM_VALUE 0
#define EXPECTED_OUTPUT_0_EDGE_TYPE NONE
#define EXPECTED_OUTPUT_0_FREQ 50000000
#define EXPECTED_OUTPUT_0_HAS_IN 0
#define EXPECTED_OUTPUT_0_HAS_OUT 1
#define EXPECTED_OUTPUT_0_HAS_TRI 0
#define EXPECTED_OUTPUT_0_IRQ_TYPE NONE
#define EXPECTED_OUTPUT_0_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_3_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_3_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_3_COMPONENT_NAME input_sequence_3
#define INPUT_SEQUENCE_3_BASE 0x40bd0
#define INPUT_SEQUENCE_3_SPAN 16
#define INPUT_SEQUENCE_3_END 0x40bdf
#define INPUT_SEQUENCE_3_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_3_CAPTURE 0
#define INPUT_SEQUENCE_3_DATA_WIDTH 32
#define INPUT_SEQUENCE_3_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_3_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_3_EDGE_TYPE NONE
#define INPUT_SEQUENCE_3_FREQ 50000000
#define INPUT_SEQUENCE_3_HAS_IN 0
#define INPUT_SEQUENCE_3_HAS_OUT 1
#define INPUT_SEQUENCE_3_HAS_TRI 0
#define INPUT_SEQUENCE_3_IRQ_TYPE NONE
#define INPUT_SEQUENCE_3_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_2_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_2_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_2_COMPONENT_NAME input_sequence_2
#define INPUT_SEQUENCE_2_BASE 0x40be0
#define INPUT_SEQUENCE_2_SPAN 16
#define INPUT_SEQUENCE_2_END 0x40bef
#define INPUT_SEQUENCE_2_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_2_CAPTURE 0
#define INPUT_SEQUENCE_2_DATA_WIDTH 32
#define INPUT_SEQUENCE_2_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_2_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_2_EDGE_TYPE NONE
#define INPUT_SEQUENCE_2_FREQ 50000000
#define INPUT_SEQUENCE_2_HAS_IN 0
#define INPUT_SEQUENCE_2_HAS_OUT 1
#define INPUT_SEQUENCE_2_HAS_TRI 0
#define INPUT_SEQUENCE_2_IRQ_TYPE NONE
#define INPUT_SEQUENCE_2_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_1_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_1_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_1_COMPONENT_NAME input_sequence_1
#define INPUT_SEQUENCE_1_BASE 0x40bf0
#define INPUT_SEQUENCE_1_SPAN 16
#define INPUT_SEQUENCE_1_END 0x40bff
#define INPUT_SEQUENCE_1_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_1_CAPTURE 0
#define INPUT_SEQUENCE_1_DATA_WIDTH 32
#define INPUT_SEQUENCE_1_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_1_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_1_EDGE_TYPE NONE
#define INPUT_SEQUENCE_1_FREQ 50000000
#define INPUT_SEQUENCE_1_HAS_IN 0
#define INPUT_SEQUENCE_1_HAS_OUT 1
#define INPUT_SEQUENCE_1_HAS_TRI 0
#define INPUT_SEQUENCE_1_IRQ_TYPE NONE
#define INPUT_SEQUENCE_1_RESET_VALUE 0

/*
 * Macros for device 'input_sequence_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_SEQUENCE_0_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_SEQUENCE_0_COMPONENT_TYPE altera_avalon_pio
#define INPUT_SEQUENCE_0_COMPONENT_NAME input_sequence_0
#define INPUT_SEQUENCE_0_BASE 0x40c00
#define INPUT_SEQUENCE_0_SPAN 16
#define INPUT_SEQUENCE_0_END 0x40c0f
#define INPUT_SEQUENCE_0_BIT_CLEARING_EDGE_REGISTER 0
#define INPUT_SEQUENCE_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_SEQUENCE_0_CAPTURE 0
#define INPUT_SEQUENCE_0_DATA_WIDTH 32
#define INPUT_SEQUENCE_0_DO_TEST_BENCH_WIRING 0
#define INPUT_SEQUENCE_0_DRIVEN_SIM_VALUE 0
#define INPUT_SEQUENCE_0_EDGE_TYPE NONE
#define INPUT_SEQUENCE_0_FREQ 50000000
#define INPUT_SEQUENCE_0_HAS_IN 0
#define INPUT_SEQUENCE_0_HAS_OUT 1
#define INPUT_SEQUENCE_0_HAS_TRI 0
#define INPUT_SEQUENCE_0_IRQ_TYPE NONE
#define INPUT_SEQUENCE_0_RESET_VALUE 0

/*
 * Macros for device 'error_sum_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_7_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_7_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_7_COMPONENT_NAME error_sum_7
#define ERROR_SUM_7_BASE 0x40c10
#define ERROR_SUM_7_SPAN 16
#define ERROR_SUM_7_END 0x40c1f
#define ERROR_SUM_7_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_7_CAPTURE 0
#define ERROR_SUM_7_DATA_WIDTH 32
#define ERROR_SUM_7_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_7_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_7_EDGE_TYPE NONE
#define ERROR_SUM_7_FREQ 50000000
#define ERROR_SUM_7_HAS_IN 1
#define ERROR_SUM_7_HAS_OUT 0
#define ERROR_SUM_7_HAS_TRI 0
#define ERROR_SUM_7_IRQ_TYPE NONE
#define ERROR_SUM_7_RESET_VALUE 0

/*
 * Macros for device 'error_sum_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_6_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_6_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_6_COMPONENT_NAME error_sum_6
#define ERROR_SUM_6_BASE 0x40c20
#define ERROR_SUM_6_SPAN 16
#define ERROR_SUM_6_END 0x40c2f
#define ERROR_SUM_6_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_6_CAPTURE 0
#define ERROR_SUM_6_DATA_WIDTH 32
#define ERROR_SUM_6_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_6_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_6_EDGE_TYPE NONE
#define ERROR_SUM_6_FREQ 50000000
#define ERROR_SUM_6_HAS_IN 1
#define ERROR_SUM_6_HAS_OUT 0
#define ERROR_SUM_6_HAS_TRI 0
#define ERROR_SUM_6_IRQ_TYPE NONE
#define ERROR_SUM_6_RESET_VALUE 0

/*
 * Macros for device 'error_sum_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_5_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_5_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_5_COMPONENT_NAME error_sum_5
#define ERROR_SUM_5_BASE 0x40c30
#define ERROR_SUM_5_SPAN 16
#define ERROR_SUM_5_END 0x40c3f
#define ERROR_SUM_5_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_5_CAPTURE 0
#define ERROR_SUM_5_DATA_WIDTH 32
#define ERROR_SUM_5_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_5_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_5_EDGE_TYPE NONE
#define ERROR_SUM_5_FREQ 50000000
#define ERROR_SUM_5_HAS_IN 1
#define ERROR_SUM_5_HAS_OUT 0
#define ERROR_SUM_5_HAS_TRI 0
#define ERROR_SUM_5_IRQ_TYPE NONE
#define ERROR_SUM_5_RESET_VALUE 0

/*
 * Macros for device 'error_sum_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_4_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_4_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_4_COMPONENT_NAME error_sum_4
#define ERROR_SUM_4_BASE 0x40c40
#define ERROR_SUM_4_SPAN 16
#define ERROR_SUM_4_END 0x40c4f
#define ERROR_SUM_4_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_4_CAPTURE 0
#define ERROR_SUM_4_DATA_WIDTH 32
#define ERROR_SUM_4_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_4_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_4_EDGE_TYPE NONE
#define ERROR_SUM_4_FREQ 50000000
#define ERROR_SUM_4_HAS_IN 1
#define ERROR_SUM_4_HAS_OUT 0
#define ERROR_SUM_4_HAS_TRI 0
#define ERROR_SUM_4_IRQ_TYPE NONE
#define ERROR_SUM_4_RESET_VALUE 0

/*
 * Macros for device 'error_sum_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_3_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_3_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_3_COMPONENT_NAME error_sum_3
#define ERROR_SUM_3_BASE 0x40c50
#define ERROR_SUM_3_SPAN 16
#define ERROR_SUM_3_END 0x40c5f
#define ERROR_SUM_3_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_3_CAPTURE 0
#define ERROR_SUM_3_DATA_WIDTH 32
#define ERROR_SUM_3_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_3_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_3_EDGE_TYPE NONE
#define ERROR_SUM_3_FREQ 50000000
#define ERROR_SUM_3_HAS_IN 1
#define ERROR_SUM_3_HAS_OUT 0
#define ERROR_SUM_3_HAS_TRI 0
#define ERROR_SUM_3_IRQ_TYPE NONE
#define ERROR_SUM_3_RESET_VALUE 0

/*
 * Macros for device 'error_sum_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_2_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_2_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_2_COMPONENT_NAME error_sum_2
#define ERROR_SUM_2_BASE 0x40c60
#define ERROR_SUM_2_SPAN 16
#define ERROR_SUM_2_END 0x40c6f
#define ERROR_SUM_2_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_2_CAPTURE 0
#define ERROR_SUM_2_DATA_WIDTH 32
#define ERROR_SUM_2_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_2_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_2_EDGE_TYPE NONE
#define ERROR_SUM_2_FREQ 50000000
#define ERROR_SUM_2_HAS_IN 1
#define ERROR_SUM_2_HAS_OUT 0
#define ERROR_SUM_2_HAS_TRI 0
#define ERROR_SUM_2_IRQ_TYPE NONE
#define ERROR_SUM_2_RESET_VALUE 0

/*
 * Macros for device 'error_sum_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_1_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_1_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_1_COMPONENT_NAME error_sum_1
#define ERROR_SUM_1_BASE 0x40c70
#define ERROR_SUM_1_SPAN 16
#define ERROR_SUM_1_END 0x40c7f
#define ERROR_SUM_1_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_1_CAPTURE 0
#define ERROR_SUM_1_DATA_WIDTH 32
#define ERROR_SUM_1_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_1_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_1_EDGE_TYPE NONE
#define ERROR_SUM_1_FREQ 50000000
#define ERROR_SUM_1_HAS_IN 1
#define ERROR_SUM_1_HAS_OUT 0
#define ERROR_SUM_1_HAS_TRI 0
#define ERROR_SUM_1_IRQ_TYPE NONE
#define ERROR_SUM_1_RESET_VALUE 0

/*
 * Macros for device 'error_sum_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_0_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_0_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_0_COMPONENT_NAME error_sum_0
#define ERROR_SUM_0_BASE 0x40c80
#define ERROR_SUM_0_SPAN 16
#define ERROR_SUM_0_END 0x40c8f
#define ERROR_SUM_0_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_0_CAPTURE 0
#define ERROR_SUM_0_DATA_WIDTH 32
#define ERROR_SUM_0_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_0_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_0_EDGE_TYPE NONE
#define ERROR_SUM_0_FREQ 50000000
#define ERROR_SUM_0_HAS_IN 1
#define ERROR_SUM_0_HAS_OUT 0
#define ERROR_SUM_0_HAS_TRI 0
#define ERROR_SUM_0_IRQ_TYPE NONE
#define ERROR_SUM_0_RESET_VALUE 0

/*
 * Macros for device 'done_processing_feedback', class 'altera_avalon_pio'
 * The macros are prefixed with 'DONE_PROCESSING_FEEDBACK_'.
 * The prefix is the slave descriptor.
 */
#define DONE_PROCESSING_FEEDBACK_COMPONENT_TYPE altera_avalon_pio
#define DONE_PROCESSING_FEEDBACK_COMPONENT_NAME done_processing_feedback
#define DONE_PROCESSING_FEEDBACK_BASE 0x40c90
#define DONE_PROCESSING_FEEDBACK_SPAN 16
#define DONE_PROCESSING_FEEDBACK_END 0x40c9f
#define DONE_PROCESSING_FEEDBACK_BIT_CLEARING_EDGE_REGISTER 0
#define DONE_PROCESSING_FEEDBACK_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DONE_PROCESSING_FEEDBACK_CAPTURE 0
#define DONE_PROCESSING_FEEDBACK_DATA_WIDTH 1
#define DONE_PROCESSING_FEEDBACK_DO_TEST_BENCH_WIRING 0
#define DONE_PROCESSING_FEEDBACK_DRIVEN_SIM_VALUE 0
#define DONE_PROCESSING_FEEDBACK_EDGE_TYPE NONE
#define DONE_PROCESSING_FEEDBACK_FREQ 50000000
#define DONE_PROCESSING_FEEDBACK_HAS_IN 0
#define DONE_PROCESSING_FEEDBACK_HAS_OUT 1
#define DONE_PROCESSING_FEEDBACK_HAS_TRI 0
#define DONE_PROCESSING_FEEDBACK_IRQ_TYPE NONE
#define DONE_PROCESSING_FEEDBACK_RESET_VALUE 0

/*
 * Macros for device 'ready_to_process', class 'altera_avalon_pio'
 * The macros are prefixed with 'READY_TO_PROCESS_'.
 * The prefix is the slave descriptor.
 */
#define READY_TO_PROCESS_COMPONENT_TYPE altera_avalon_pio
#define READY_TO_PROCESS_COMPONENT_NAME ready_to_process
#define READY_TO_PROCESS_BASE 0x40ca0
#define READY_TO_PROCESS_SPAN 16
#define READY_TO_PROCESS_END 0x40caf
#define READY_TO_PROCESS_BIT_CLEARING_EDGE_REGISTER 0
#define READY_TO_PROCESS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define READY_TO_PROCESS_CAPTURE 0
#define READY_TO_PROCESS_DATA_WIDTH 1
#define READY_TO_PROCESS_DO_TEST_BENCH_WIRING 0
#define READY_TO_PROCESS_DRIVEN_SIM_VALUE 0
#define READY_TO_PROCESS_EDGE_TYPE NONE
#define READY_TO_PROCESS_FREQ 50000000
#define READY_TO_PROCESS_HAS_IN 1
#define READY_TO_PROCESS_HAS_OUT 0
#define READY_TO_PROCESS_HAS_TRI 0
#define READY_TO_PROCESS_IRQ_TYPE NONE
#define READY_TO_PROCESS_RESET_VALUE 0

/*
 * Macros for device 'done_processing_chrom', class 'altera_avalon_pio'
 * The macros are prefixed with 'DONE_PROCESSING_CHROM_'.
 * The prefix is the slave descriptor.
 */
#define DONE_PROCESSING_CHROM_COMPONENT_TYPE altera_avalon_pio
#define DONE_PROCESSING_CHROM_COMPONENT_NAME done_processing_chrom
#define DONE_PROCESSING_CHROM_BASE 0x40cb0
#define DONE_PROCESSING_CHROM_SPAN 16
#define DONE_PROCESSING_CHROM_END 0x40cbf
#define DONE_PROCESSING_CHROM_BIT_CLEARING_EDGE_REGISTER 0
#define DONE_PROCESSING_CHROM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DONE_PROCESSING_CHROM_CAPTURE 0
#define DONE_PROCESSING_CHROM_DATA_WIDTH 1
#define DONE_PROCESSING_CHROM_DO_TEST_BENCH_WIRING 0
#define DONE_PROCESSING_CHROM_DRIVEN_SIM_VALUE 0
#define DONE_PROCESSING_CHROM_EDGE_TYPE NONE
#define DONE_PROCESSING_CHROM_FREQ 50000000
#define DONE_PROCESSING_CHROM_HAS_IN 1
#define DONE_PROCESSING_CHROM_HAS_OUT 0
#define DONE_PROCESSING_CHROM_HAS_TRI 0
#define DONE_PROCESSING_CHROM_IRQ_TYPE NONE
#define DONE_PROCESSING_CHROM_RESET_VALUE 0

/*
 * Macros for device 'start_processing_chrom', class 'altera_avalon_pio'
 * The macros are prefixed with 'START_PROCESSING_CHROM_'.
 * The prefix is the slave descriptor.
 */
#define START_PROCESSING_CHROM_COMPONENT_TYPE altera_avalon_pio
#define START_PROCESSING_CHROM_COMPONENT_NAME start_processing_chrom
#define START_PROCESSING_CHROM_BASE 0x40cc0
#define START_PROCESSING_CHROM_SPAN 16
#define START_PROCESSING_CHROM_END 0x40ccf
#define START_PROCESSING_CHROM_BIT_CLEARING_EDGE_REGISTER 0
#define START_PROCESSING_CHROM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define START_PROCESSING_CHROM_CAPTURE 0
#define START_PROCESSING_CHROM_DATA_WIDTH 1
#define START_PROCESSING_CHROM_DO_TEST_BENCH_WIRING 0
#define START_PROCESSING_CHROM_DRIVEN_SIM_VALUE 0
#define START_PROCESSING_CHROM_EDGE_TYPE NONE
#define START_PROCESSING_CHROM_FREQ 50000000
#define START_PROCESSING_CHROM_HAS_IN 0
#define START_PROCESSING_CHROM_HAS_OUT 1
#define START_PROCESSING_CHROM_HAS_TRI 0
#define START_PROCESSING_CHROM_IRQ_TYPE NONE
#define START_PROCESSING_CHROM_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_30', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_30_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_30_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_30_COMPONENT_NAME chrom_seg_30
#define CHROM_SEG_30_BASE 0x40cd0
#define CHROM_SEG_30_SPAN 16
#define CHROM_SEG_30_END 0x40cdf
#define CHROM_SEG_30_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_30_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_30_CAPTURE 0
#define CHROM_SEG_30_DATA_WIDTH 32
#define CHROM_SEG_30_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_30_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_30_EDGE_TYPE NONE
#define CHROM_SEG_30_FREQ 50000000
#define CHROM_SEG_30_HAS_IN 0
#define CHROM_SEG_30_HAS_OUT 1
#define CHROM_SEG_30_HAS_TRI 0
#define CHROM_SEG_30_IRQ_TYPE NONE
#define CHROM_SEG_30_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_29', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_29_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_29_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_29_COMPONENT_NAME chrom_seg_29
#define CHROM_SEG_29_BASE 0x40ce0
#define CHROM_SEG_29_SPAN 16
#define CHROM_SEG_29_END 0x40cef
#define CHROM_SEG_29_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_29_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_29_CAPTURE 0
#define CHROM_SEG_29_DATA_WIDTH 32
#define CHROM_SEG_29_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_29_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_29_EDGE_TYPE NONE
#define CHROM_SEG_29_FREQ 50000000
#define CHROM_SEG_29_HAS_IN 0
#define CHROM_SEG_29_HAS_OUT 1
#define CHROM_SEG_29_HAS_TRI 0
#define CHROM_SEG_29_IRQ_TYPE NONE
#define CHROM_SEG_29_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_28', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_28_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_28_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_28_COMPONENT_NAME chrom_seg_28
#define CHROM_SEG_28_BASE 0x40cf0
#define CHROM_SEG_28_SPAN 16
#define CHROM_SEG_28_END 0x40cff
#define CHROM_SEG_28_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_28_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_28_CAPTURE 0
#define CHROM_SEG_28_DATA_WIDTH 32
#define CHROM_SEG_28_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_28_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_28_EDGE_TYPE NONE
#define CHROM_SEG_28_FREQ 50000000
#define CHROM_SEG_28_HAS_IN 0
#define CHROM_SEG_28_HAS_OUT 1
#define CHROM_SEG_28_HAS_TRI 0
#define CHROM_SEG_28_IRQ_TYPE NONE
#define CHROM_SEG_28_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_27', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_27_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_27_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_27_COMPONENT_NAME chrom_seg_27
#define CHROM_SEG_27_BASE 0x40d00
#define CHROM_SEG_27_SPAN 16
#define CHROM_SEG_27_END 0x40d0f
#define CHROM_SEG_27_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_27_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_27_CAPTURE 0
#define CHROM_SEG_27_DATA_WIDTH 32
#define CHROM_SEG_27_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_27_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_27_EDGE_TYPE NONE
#define CHROM_SEG_27_FREQ 50000000
#define CHROM_SEG_27_HAS_IN 0
#define CHROM_SEG_27_HAS_OUT 1
#define CHROM_SEG_27_HAS_TRI 0
#define CHROM_SEG_27_IRQ_TYPE NONE
#define CHROM_SEG_27_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_26', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_26_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_26_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_26_COMPONENT_NAME chrom_seg_26
#define CHROM_SEG_26_BASE 0x40d10
#define CHROM_SEG_26_SPAN 16
#define CHROM_SEG_26_END 0x40d1f
#define CHROM_SEG_26_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_26_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_26_CAPTURE 0
#define CHROM_SEG_26_DATA_WIDTH 32
#define CHROM_SEG_26_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_26_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_26_EDGE_TYPE NONE
#define CHROM_SEG_26_FREQ 50000000
#define CHROM_SEG_26_HAS_IN 0
#define CHROM_SEG_26_HAS_OUT 1
#define CHROM_SEG_26_HAS_TRI 0
#define CHROM_SEG_26_IRQ_TYPE NONE
#define CHROM_SEG_26_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_25', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_25_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_25_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_25_COMPONENT_NAME chrom_seg_25
#define CHROM_SEG_25_BASE 0x40d20
#define CHROM_SEG_25_SPAN 16
#define CHROM_SEG_25_END 0x40d2f
#define CHROM_SEG_25_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_25_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_25_CAPTURE 0
#define CHROM_SEG_25_DATA_WIDTH 32
#define CHROM_SEG_25_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_25_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_25_EDGE_TYPE NONE
#define CHROM_SEG_25_FREQ 50000000
#define CHROM_SEG_25_HAS_IN 0
#define CHROM_SEG_25_HAS_OUT 1
#define CHROM_SEG_25_HAS_TRI 0
#define CHROM_SEG_25_IRQ_TYPE NONE
#define CHROM_SEG_25_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_24', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_24_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_24_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_24_COMPONENT_NAME chrom_seg_24
#define CHROM_SEG_24_BASE 0x40d30
#define CHROM_SEG_24_SPAN 16
#define CHROM_SEG_24_END 0x40d3f
#define CHROM_SEG_24_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_24_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_24_CAPTURE 0
#define CHROM_SEG_24_DATA_WIDTH 32
#define CHROM_SEG_24_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_24_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_24_EDGE_TYPE NONE
#define CHROM_SEG_24_FREQ 50000000
#define CHROM_SEG_24_HAS_IN 0
#define CHROM_SEG_24_HAS_OUT 1
#define CHROM_SEG_24_HAS_TRI 0
#define CHROM_SEG_24_IRQ_TYPE NONE
#define CHROM_SEG_24_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_23', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_23_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_23_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_23_COMPONENT_NAME chrom_seg_23
#define CHROM_SEG_23_BASE 0x40d40
#define CHROM_SEG_23_SPAN 16
#define CHROM_SEG_23_END 0x40d4f
#define CHROM_SEG_23_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_23_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_23_CAPTURE 0
#define CHROM_SEG_23_DATA_WIDTH 32
#define CHROM_SEG_23_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_23_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_23_EDGE_TYPE NONE
#define CHROM_SEG_23_FREQ 50000000
#define CHROM_SEG_23_HAS_IN 0
#define CHROM_SEG_23_HAS_OUT 1
#define CHROM_SEG_23_HAS_TRI 0
#define CHROM_SEG_23_IRQ_TYPE NONE
#define CHROM_SEG_23_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_22', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_22_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_22_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_22_COMPONENT_NAME chrom_seg_22
#define CHROM_SEG_22_BASE 0x40d50
#define CHROM_SEG_22_SPAN 16
#define CHROM_SEG_22_END 0x40d5f
#define CHROM_SEG_22_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_22_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_22_CAPTURE 0
#define CHROM_SEG_22_DATA_WIDTH 32
#define CHROM_SEG_22_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_22_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_22_EDGE_TYPE NONE
#define CHROM_SEG_22_FREQ 50000000
#define CHROM_SEG_22_HAS_IN 0
#define CHROM_SEG_22_HAS_OUT 1
#define CHROM_SEG_22_HAS_TRI 0
#define CHROM_SEG_22_IRQ_TYPE NONE
#define CHROM_SEG_22_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_21', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_21_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_21_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_21_COMPONENT_NAME chrom_seg_21
#define CHROM_SEG_21_BASE 0x40d60
#define CHROM_SEG_21_SPAN 16
#define CHROM_SEG_21_END 0x40d6f
#define CHROM_SEG_21_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_21_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_21_CAPTURE 0
#define CHROM_SEG_21_DATA_WIDTH 32
#define CHROM_SEG_21_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_21_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_21_EDGE_TYPE NONE
#define CHROM_SEG_21_FREQ 50000000
#define CHROM_SEG_21_HAS_IN 0
#define CHROM_SEG_21_HAS_OUT 1
#define CHROM_SEG_21_HAS_TRI 0
#define CHROM_SEG_21_IRQ_TYPE NONE
#define CHROM_SEG_21_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_20', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_20_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_20_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_20_COMPONENT_NAME chrom_seg_20
#define CHROM_SEG_20_BASE 0x40d70
#define CHROM_SEG_20_SPAN 16
#define CHROM_SEG_20_END 0x40d7f
#define CHROM_SEG_20_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_20_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_20_CAPTURE 0
#define CHROM_SEG_20_DATA_WIDTH 32
#define CHROM_SEG_20_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_20_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_20_EDGE_TYPE NONE
#define CHROM_SEG_20_FREQ 50000000
#define CHROM_SEG_20_HAS_IN 0
#define CHROM_SEG_20_HAS_OUT 1
#define CHROM_SEG_20_HAS_TRI 0
#define CHROM_SEG_20_IRQ_TYPE NONE
#define CHROM_SEG_20_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_19', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_19_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_19_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_19_COMPONENT_NAME chrom_seg_19
#define CHROM_SEG_19_BASE 0x40d80
#define CHROM_SEG_19_SPAN 16
#define CHROM_SEG_19_END 0x40d8f
#define CHROM_SEG_19_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_19_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_19_CAPTURE 0
#define CHROM_SEG_19_DATA_WIDTH 32
#define CHROM_SEG_19_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_19_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_19_EDGE_TYPE NONE
#define CHROM_SEG_19_FREQ 50000000
#define CHROM_SEG_19_HAS_IN 0
#define CHROM_SEG_19_HAS_OUT 1
#define CHROM_SEG_19_HAS_TRI 0
#define CHROM_SEG_19_IRQ_TYPE NONE
#define CHROM_SEG_19_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_18', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_18_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_18_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_18_COMPONENT_NAME chrom_seg_18
#define CHROM_SEG_18_BASE 0x40d90
#define CHROM_SEG_18_SPAN 16
#define CHROM_SEG_18_END 0x40d9f
#define CHROM_SEG_18_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_18_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_18_CAPTURE 0
#define CHROM_SEG_18_DATA_WIDTH 32
#define CHROM_SEG_18_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_18_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_18_EDGE_TYPE NONE
#define CHROM_SEG_18_FREQ 50000000
#define CHROM_SEG_18_HAS_IN 0
#define CHROM_SEG_18_HAS_OUT 1
#define CHROM_SEG_18_HAS_TRI 0
#define CHROM_SEG_18_IRQ_TYPE NONE
#define CHROM_SEG_18_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_17', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_17_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_17_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_17_COMPONENT_NAME chrom_seg_17
#define CHROM_SEG_17_BASE 0x40da0
#define CHROM_SEG_17_SPAN 16
#define CHROM_SEG_17_END 0x40daf
#define CHROM_SEG_17_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_17_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_17_CAPTURE 0
#define CHROM_SEG_17_DATA_WIDTH 32
#define CHROM_SEG_17_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_17_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_17_EDGE_TYPE NONE
#define CHROM_SEG_17_FREQ 50000000
#define CHROM_SEG_17_HAS_IN 0
#define CHROM_SEG_17_HAS_OUT 1
#define CHROM_SEG_17_HAS_TRI 0
#define CHROM_SEG_17_IRQ_TYPE NONE
#define CHROM_SEG_17_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_16', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_16_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_16_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_16_COMPONENT_NAME chrom_seg_16
#define CHROM_SEG_16_BASE 0x40db0
#define CHROM_SEG_16_SPAN 16
#define CHROM_SEG_16_END 0x40dbf
#define CHROM_SEG_16_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_16_CAPTURE 0
#define CHROM_SEG_16_DATA_WIDTH 32
#define CHROM_SEG_16_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_16_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_16_EDGE_TYPE NONE
#define CHROM_SEG_16_FREQ 50000000
#define CHROM_SEG_16_HAS_IN 0
#define CHROM_SEG_16_HAS_OUT 1
#define CHROM_SEG_16_HAS_TRI 0
#define CHROM_SEG_16_IRQ_TYPE NONE
#define CHROM_SEG_16_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_15', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_15_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_15_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_15_COMPONENT_NAME chrom_seg_15
#define CHROM_SEG_15_BASE 0x40dc0
#define CHROM_SEG_15_SPAN 16
#define CHROM_SEG_15_END 0x40dcf
#define CHROM_SEG_15_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_15_CAPTURE 0
#define CHROM_SEG_15_DATA_WIDTH 32
#define CHROM_SEG_15_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_15_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_15_EDGE_TYPE NONE
#define CHROM_SEG_15_FREQ 50000000
#define CHROM_SEG_15_HAS_IN 0
#define CHROM_SEG_15_HAS_OUT 1
#define CHROM_SEG_15_HAS_TRI 0
#define CHROM_SEG_15_IRQ_TYPE NONE
#define CHROM_SEG_15_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_14', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_14_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_14_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_14_COMPONENT_NAME chrom_seg_14
#define CHROM_SEG_14_BASE 0x40dd0
#define CHROM_SEG_14_SPAN 16
#define CHROM_SEG_14_END 0x40ddf
#define CHROM_SEG_14_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_14_CAPTURE 0
#define CHROM_SEG_14_DATA_WIDTH 32
#define CHROM_SEG_14_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_14_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_14_EDGE_TYPE NONE
#define CHROM_SEG_14_FREQ 50000000
#define CHROM_SEG_14_HAS_IN 0
#define CHROM_SEG_14_HAS_OUT 1
#define CHROM_SEG_14_HAS_TRI 0
#define CHROM_SEG_14_IRQ_TYPE NONE
#define CHROM_SEG_14_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_13', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_13_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_13_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_13_COMPONENT_NAME chrom_seg_13
#define CHROM_SEG_13_BASE 0x40de0
#define CHROM_SEG_13_SPAN 16
#define CHROM_SEG_13_END 0x40def
#define CHROM_SEG_13_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_13_CAPTURE 0
#define CHROM_SEG_13_DATA_WIDTH 32
#define CHROM_SEG_13_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_13_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_13_EDGE_TYPE NONE
#define CHROM_SEG_13_FREQ 50000000
#define CHROM_SEG_13_HAS_IN 0
#define CHROM_SEG_13_HAS_OUT 1
#define CHROM_SEG_13_HAS_TRI 0
#define CHROM_SEG_13_IRQ_TYPE NONE
#define CHROM_SEG_13_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_12', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_12_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_12_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_12_COMPONENT_NAME chrom_seg_12
#define CHROM_SEG_12_BASE 0x40df0
#define CHROM_SEG_12_SPAN 16
#define CHROM_SEG_12_END 0x40dff
#define CHROM_SEG_12_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_12_CAPTURE 0
#define CHROM_SEG_12_DATA_WIDTH 32
#define CHROM_SEG_12_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_12_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_12_EDGE_TYPE NONE
#define CHROM_SEG_12_FREQ 50000000
#define CHROM_SEG_12_HAS_IN 0
#define CHROM_SEG_12_HAS_OUT 1
#define CHROM_SEG_12_HAS_TRI 0
#define CHROM_SEG_12_IRQ_TYPE NONE
#define CHROM_SEG_12_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_11', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_11_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_11_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_11_COMPONENT_NAME chrom_seg_11
#define CHROM_SEG_11_BASE 0x40e00
#define CHROM_SEG_11_SPAN 16
#define CHROM_SEG_11_END 0x40e0f
#define CHROM_SEG_11_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_11_CAPTURE 0
#define CHROM_SEG_11_DATA_WIDTH 32
#define CHROM_SEG_11_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_11_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_11_EDGE_TYPE NONE
#define CHROM_SEG_11_FREQ 50000000
#define CHROM_SEG_11_HAS_IN 0
#define CHROM_SEG_11_HAS_OUT 1
#define CHROM_SEG_11_HAS_TRI 0
#define CHROM_SEG_11_IRQ_TYPE NONE
#define CHROM_SEG_11_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_10', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_10_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_10_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_10_COMPONENT_NAME chrom_seg_10
#define CHROM_SEG_10_BASE 0x40e10
#define CHROM_SEG_10_SPAN 16
#define CHROM_SEG_10_END 0x40e1f
#define CHROM_SEG_10_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_10_CAPTURE 0
#define CHROM_SEG_10_DATA_WIDTH 32
#define CHROM_SEG_10_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_10_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_10_EDGE_TYPE NONE
#define CHROM_SEG_10_FREQ 50000000
#define CHROM_SEG_10_HAS_IN 0
#define CHROM_SEG_10_HAS_OUT 1
#define CHROM_SEG_10_HAS_TRI 0
#define CHROM_SEG_10_IRQ_TYPE NONE
#define CHROM_SEG_10_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_9', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_9_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_9_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_9_COMPONENT_NAME chrom_seg_9
#define CHROM_SEG_9_BASE 0x40e20
#define CHROM_SEG_9_SPAN 16
#define CHROM_SEG_9_END 0x40e2f
#define CHROM_SEG_9_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_9_CAPTURE 0
#define CHROM_SEG_9_DATA_WIDTH 32
#define CHROM_SEG_9_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_9_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_9_EDGE_TYPE NONE
#define CHROM_SEG_9_FREQ 50000000
#define CHROM_SEG_9_HAS_IN 0
#define CHROM_SEG_9_HAS_OUT 1
#define CHROM_SEG_9_HAS_TRI 0
#define CHROM_SEG_9_IRQ_TYPE NONE
#define CHROM_SEG_9_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_8', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_8_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_8_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_8_COMPONENT_NAME chrom_seg_8
#define CHROM_SEG_8_BASE 0x40e30
#define CHROM_SEG_8_SPAN 16
#define CHROM_SEG_8_END 0x40e3f
#define CHROM_SEG_8_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_8_CAPTURE 0
#define CHROM_SEG_8_DATA_WIDTH 32
#define CHROM_SEG_8_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_8_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_8_EDGE_TYPE NONE
#define CHROM_SEG_8_FREQ 50000000
#define CHROM_SEG_8_HAS_IN 0
#define CHROM_SEG_8_HAS_OUT 1
#define CHROM_SEG_8_HAS_TRI 0
#define CHROM_SEG_8_IRQ_TYPE NONE
#define CHROM_SEG_8_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_7_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_7_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_7_COMPONENT_NAME chrom_seg_7
#define CHROM_SEG_7_BASE 0x40e40
#define CHROM_SEG_7_SPAN 16
#define CHROM_SEG_7_END 0x40e4f
#define CHROM_SEG_7_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_7_CAPTURE 0
#define CHROM_SEG_7_DATA_WIDTH 32
#define CHROM_SEG_7_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_7_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_7_EDGE_TYPE NONE
#define CHROM_SEG_7_FREQ 50000000
#define CHROM_SEG_7_HAS_IN 0
#define CHROM_SEG_7_HAS_OUT 1
#define CHROM_SEG_7_HAS_TRI 0
#define CHROM_SEG_7_IRQ_TYPE NONE
#define CHROM_SEG_7_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_6_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_6_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_6_COMPONENT_NAME chrom_seg_6
#define CHROM_SEG_6_BASE 0x40e50
#define CHROM_SEG_6_SPAN 16
#define CHROM_SEG_6_END 0x40e5f
#define CHROM_SEG_6_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_6_CAPTURE 0
#define CHROM_SEG_6_DATA_WIDTH 32
#define CHROM_SEG_6_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_6_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_6_EDGE_TYPE NONE
#define CHROM_SEG_6_FREQ 50000000
#define CHROM_SEG_6_HAS_IN 0
#define CHROM_SEG_6_HAS_OUT 1
#define CHROM_SEG_6_HAS_TRI 0
#define CHROM_SEG_6_IRQ_TYPE NONE
#define CHROM_SEG_6_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_5_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_5_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_5_COMPONENT_NAME chrom_seg_5
#define CHROM_SEG_5_BASE 0x40e60
#define CHROM_SEG_5_SPAN 16
#define CHROM_SEG_5_END 0x40e6f
#define CHROM_SEG_5_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_5_CAPTURE 0
#define CHROM_SEG_5_DATA_WIDTH 32
#define CHROM_SEG_5_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_5_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_5_EDGE_TYPE NONE
#define CHROM_SEG_5_FREQ 50000000
#define CHROM_SEG_5_HAS_IN 0
#define CHROM_SEG_5_HAS_OUT 1
#define CHROM_SEG_5_HAS_TRI 0
#define CHROM_SEG_5_IRQ_TYPE NONE
#define CHROM_SEG_5_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_4_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_4_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_4_COMPONENT_NAME chrom_seg_4
#define CHROM_SEG_4_BASE 0x40e70
#define CHROM_SEG_4_SPAN 16
#define CHROM_SEG_4_END 0x40e7f
#define CHROM_SEG_4_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_4_CAPTURE 0
#define CHROM_SEG_4_DATA_WIDTH 32
#define CHROM_SEG_4_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_4_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_4_EDGE_TYPE NONE
#define CHROM_SEG_4_FREQ 50000000
#define CHROM_SEG_4_HAS_IN 0
#define CHROM_SEG_4_HAS_OUT 1
#define CHROM_SEG_4_HAS_TRI 0
#define CHROM_SEG_4_IRQ_TYPE NONE
#define CHROM_SEG_4_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_3_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_3_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_3_COMPONENT_NAME chrom_seg_3
#define CHROM_SEG_3_BASE 0x40e80
#define CHROM_SEG_3_SPAN 16
#define CHROM_SEG_3_END 0x40e8f
#define CHROM_SEG_3_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_3_CAPTURE 0
#define CHROM_SEG_3_DATA_WIDTH 32
#define CHROM_SEG_3_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_3_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_3_EDGE_TYPE NONE
#define CHROM_SEG_3_FREQ 50000000
#define CHROM_SEG_3_HAS_IN 0
#define CHROM_SEG_3_HAS_OUT 1
#define CHROM_SEG_3_HAS_TRI 0
#define CHROM_SEG_3_IRQ_TYPE NONE
#define CHROM_SEG_3_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_2_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_2_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_2_COMPONENT_NAME chrom_seg_2
#define CHROM_SEG_2_BASE 0x40e90
#define CHROM_SEG_2_SPAN 16
#define CHROM_SEG_2_END 0x40e9f
#define CHROM_SEG_2_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_2_CAPTURE 0
#define CHROM_SEG_2_DATA_WIDTH 32
#define CHROM_SEG_2_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_2_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_2_EDGE_TYPE NONE
#define CHROM_SEG_2_FREQ 50000000
#define CHROM_SEG_2_HAS_IN 0
#define CHROM_SEG_2_HAS_OUT 1
#define CHROM_SEG_2_HAS_TRI 0
#define CHROM_SEG_2_IRQ_TYPE NONE
#define CHROM_SEG_2_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_1_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_1_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_1_COMPONENT_NAME chrom_seg_1
#define CHROM_SEG_1_BASE 0x40ea0
#define CHROM_SEG_1_SPAN 16
#define CHROM_SEG_1_END 0x40eaf
#define CHROM_SEG_1_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_1_CAPTURE 0
#define CHROM_SEG_1_DATA_WIDTH 32
#define CHROM_SEG_1_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_1_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_1_EDGE_TYPE NONE
#define CHROM_SEG_1_FREQ 50000000
#define CHROM_SEG_1_HAS_IN 0
#define CHROM_SEG_1_HAS_OUT 1
#define CHROM_SEG_1_HAS_TRI 0
#define CHROM_SEG_1_IRQ_TYPE NONE
#define CHROM_SEG_1_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_0_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_0_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_0_COMPONENT_NAME chrom_seg_0
#define CHROM_SEG_0_BASE 0x40eb0
#define CHROM_SEG_0_SPAN 16
#define CHROM_SEG_0_END 0x40ebf
#define CHROM_SEG_0_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_0_CAPTURE 0
#define CHROM_SEG_0_DATA_WIDTH 32
#define CHROM_SEG_0_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_0_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_0_EDGE_TYPE NONE
#define CHROM_SEG_0_FREQ 50000000
#define CHROM_SEG_0_HAS_IN 0
#define CHROM_SEG_0_HAS_OUT 1
#define CHROM_SEG_0_HAS_TRI 0
#define CHROM_SEG_0_IRQ_TYPE NONE
#define CHROM_SEG_0_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
