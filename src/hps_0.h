#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'testeio' in
 * file './testeio.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'error_sum_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_7_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_7_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_7_COMPONENT_NAME error_sum_7
#define ERROR_SUM_7_BASE 0x0
#define ERROR_SUM_7_SPAN 16
#define ERROR_SUM_7_END 0xf
#define ERROR_SUM_7_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_7_CAPTURE 0
#define ERROR_SUM_7_DATA_WIDTH 32
#define ERROR_SUM_7_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_7_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_7_EDGE_TYPE NONE
#define ERROR_SUM_7_FREQ 50000000
#define ERROR_SUM_7_HAS_IN 1
#define ERROR_SUM_7_HAS_OUT 0
#define ERROR_SUM_7_HAS_TRI 0
#define ERROR_SUM_7_IRQ_TYPE NONE
#define ERROR_SUM_7_RESET_VALUE 0

/*
 * Macros for device 'error_sum_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_6_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_6_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_6_COMPONENT_NAME error_sum_6
#define ERROR_SUM_6_BASE 0x10
#define ERROR_SUM_6_SPAN 16
#define ERROR_SUM_6_END 0x1f
#define ERROR_SUM_6_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_6_CAPTURE 0
#define ERROR_SUM_6_DATA_WIDTH 32
#define ERROR_SUM_6_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_6_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_6_EDGE_TYPE NONE
#define ERROR_SUM_6_FREQ 50000000
#define ERROR_SUM_6_HAS_IN 1
#define ERROR_SUM_6_HAS_OUT 0
#define ERROR_SUM_6_HAS_TRI 0
#define ERROR_SUM_6_IRQ_TYPE NONE
#define ERROR_SUM_6_RESET_VALUE 0

/*
 * Macros for device 'error_sum_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_5_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_5_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_5_COMPONENT_NAME error_sum_5
#define ERROR_SUM_5_BASE 0x20
#define ERROR_SUM_5_SPAN 16
#define ERROR_SUM_5_END 0x2f
#define ERROR_SUM_5_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_5_CAPTURE 0
#define ERROR_SUM_5_DATA_WIDTH 32
#define ERROR_SUM_5_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_5_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_5_EDGE_TYPE NONE
#define ERROR_SUM_5_FREQ 50000000
#define ERROR_SUM_5_HAS_IN 1
#define ERROR_SUM_5_HAS_OUT 0
#define ERROR_SUM_5_HAS_TRI 0
#define ERROR_SUM_5_IRQ_TYPE NONE
#define ERROR_SUM_5_RESET_VALUE 0

/*
 * Macros for device 'error_sum_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_4_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_4_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_4_COMPONENT_NAME error_sum_4
#define ERROR_SUM_4_BASE 0x30
#define ERROR_SUM_4_SPAN 16
#define ERROR_SUM_4_END 0x3f
#define ERROR_SUM_4_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_4_CAPTURE 0
#define ERROR_SUM_4_DATA_WIDTH 32
#define ERROR_SUM_4_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_4_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_4_EDGE_TYPE NONE
#define ERROR_SUM_4_FREQ 50000000
#define ERROR_SUM_4_HAS_IN 1
#define ERROR_SUM_4_HAS_OUT 0
#define ERROR_SUM_4_HAS_TRI 0
#define ERROR_SUM_4_IRQ_TYPE NONE
#define ERROR_SUM_4_RESET_VALUE 0

/*
 * Macros for device 'error_sum_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_3_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_3_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_3_COMPONENT_NAME error_sum_3
#define ERROR_SUM_3_BASE 0x40
#define ERROR_SUM_3_SPAN 16
#define ERROR_SUM_3_END 0x4f
#define ERROR_SUM_3_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_3_CAPTURE 0
#define ERROR_SUM_3_DATA_WIDTH 32
#define ERROR_SUM_3_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_3_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_3_EDGE_TYPE NONE
#define ERROR_SUM_3_FREQ 50000000
#define ERROR_SUM_3_HAS_IN 1
#define ERROR_SUM_3_HAS_OUT 0
#define ERROR_SUM_3_HAS_TRI 0
#define ERROR_SUM_3_IRQ_TYPE NONE
#define ERROR_SUM_3_RESET_VALUE 0

/*
 * Macros for device 'error_sum_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_2_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_2_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_2_COMPONENT_NAME error_sum_2
#define ERROR_SUM_2_BASE 0x50
#define ERROR_SUM_2_SPAN 16
#define ERROR_SUM_2_END 0x5f
#define ERROR_SUM_2_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_2_CAPTURE 0
#define ERROR_SUM_2_DATA_WIDTH 32
#define ERROR_SUM_2_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_2_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_2_EDGE_TYPE NONE
#define ERROR_SUM_2_FREQ 50000000
#define ERROR_SUM_2_HAS_IN 1
#define ERROR_SUM_2_HAS_OUT 0
#define ERROR_SUM_2_HAS_TRI 0
#define ERROR_SUM_2_IRQ_TYPE NONE
#define ERROR_SUM_2_RESET_VALUE 0

/*
 * Macros for device 'error_sum_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_1_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_1_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_1_COMPONENT_NAME error_sum_1
#define ERROR_SUM_1_BASE 0x60
#define ERROR_SUM_1_SPAN 16
#define ERROR_SUM_1_END 0x6f
#define ERROR_SUM_1_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_1_CAPTURE 0
#define ERROR_SUM_1_DATA_WIDTH 32
#define ERROR_SUM_1_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_1_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_1_EDGE_TYPE NONE
#define ERROR_SUM_1_FREQ 50000000
#define ERROR_SUM_1_HAS_IN 1
#define ERROR_SUM_1_HAS_OUT 0
#define ERROR_SUM_1_HAS_TRI 0
#define ERROR_SUM_1_IRQ_TYPE NONE
#define ERROR_SUM_1_RESET_VALUE 0

/*
 * Macros for device 'error_sum_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'ERROR_SUM_0_'.
 * The prefix is the slave descriptor.
 */
#define ERROR_SUM_0_COMPONENT_TYPE altera_avalon_pio
#define ERROR_SUM_0_COMPONENT_NAME error_sum_0
#define ERROR_SUM_0_BASE 0x70
#define ERROR_SUM_0_SPAN 16
#define ERROR_SUM_0_END 0x7f
#define ERROR_SUM_0_BIT_CLEARING_EDGE_REGISTER 0
#define ERROR_SUM_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ERROR_SUM_0_CAPTURE 0
#define ERROR_SUM_0_DATA_WIDTH 32
#define ERROR_SUM_0_DO_TEST_BENCH_WIRING 0
#define ERROR_SUM_0_DRIVEN_SIM_VALUE 0
#define ERROR_SUM_0_EDGE_TYPE NONE
#define ERROR_SUM_0_FREQ 50000000
#define ERROR_SUM_0_HAS_IN 1
#define ERROR_SUM_0_HAS_OUT 0
#define ERROR_SUM_0_HAS_TRI 0
#define ERROR_SUM_0_IRQ_TYPE NONE
#define ERROR_SUM_0_RESET_VALUE 0

/*
 * Macros for device 'expected_result_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_7_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_7_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_7_COMPONENT_NAME expected_result_7
#define EXPECTED_RESULT_7_BASE 0x80
#define EXPECTED_RESULT_7_SPAN 16
#define EXPECTED_RESULT_7_END 0x8f
#define EXPECTED_RESULT_7_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_7_CAPTURE 0
#define EXPECTED_RESULT_7_DATA_WIDTH 32
#define EXPECTED_RESULT_7_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_7_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_7_EDGE_TYPE NONE
#define EXPECTED_RESULT_7_FREQ 50000000
#define EXPECTED_RESULT_7_HAS_IN 0
#define EXPECTED_RESULT_7_HAS_OUT 1
#define EXPECTED_RESULT_7_HAS_TRI 0
#define EXPECTED_RESULT_7_IRQ_TYPE NONE
#define EXPECTED_RESULT_7_RESET_VALUE 0

/*
 * Macros for device 'expected_result_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_6_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_6_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_6_COMPONENT_NAME expected_result_6
#define EXPECTED_RESULT_6_BASE 0x90
#define EXPECTED_RESULT_6_SPAN 16
#define EXPECTED_RESULT_6_END 0x9f
#define EXPECTED_RESULT_6_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_6_CAPTURE 0
#define EXPECTED_RESULT_6_DATA_WIDTH 32
#define EXPECTED_RESULT_6_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_6_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_6_EDGE_TYPE NONE
#define EXPECTED_RESULT_6_FREQ 50000000
#define EXPECTED_RESULT_6_HAS_IN 0
#define EXPECTED_RESULT_6_HAS_OUT 1
#define EXPECTED_RESULT_6_HAS_TRI 0
#define EXPECTED_RESULT_6_IRQ_TYPE NONE
#define EXPECTED_RESULT_6_RESET_VALUE 0

/*
 * Macros for device 'expected_result_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_5_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_5_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_5_COMPONENT_NAME expected_result_5
#define EXPECTED_RESULT_5_BASE 0xa0
#define EXPECTED_RESULT_5_SPAN 16
#define EXPECTED_RESULT_5_END 0xaf
#define EXPECTED_RESULT_5_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_5_CAPTURE 0
#define EXPECTED_RESULT_5_DATA_WIDTH 32
#define EXPECTED_RESULT_5_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_5_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_5_EDGE_TYPE NONE
#define EXPECTED_RESULT_5_FREQ 50000000
#define EXPECTED_RESULT_5_HAS_IN 0
#define EXPECTED_RESULT_5_HAS_OUT 1
#define EXPECTED_RESULT_5_HAS_TRI 0
#define EXPECTED_RESULT_5_IRQ_TYPE NONE
#define EXPECTED_RESULT_5_RESET_VALUE 0

/*
 * Macros for device 'expected_result_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_4_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_4_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_4_COMPONENT_NAME expected_result_4
#define EXPECTED_RESULT_4_BASE 0xb0
#define EXPECTED_RESULT_4_SPAN 16
#define EXPECTED_RESULT_4_END 0xbf
#define EXPECTED_RESULT_4_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_4_CAPTURE 0
#define EXPECTED_RESULT_4_DATA_WIDTH 32
#define EXPECTED_RESULT_4_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_4_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_4_EDGE_TYPE NONE
#define EXPECTED_RESULT_4_FREQ 50000000
#define EXPECTED_RESULT_4_HAS_IN 0
#define EXPECTED_RESULT_4_HAS_OUT 1
#define EXPECTED_RESULT_4_HAS_TRI 0
#define EXPECTED_RESULT_4_IRQ_TYPE NONE
#define EXPECTED_RESULT_4_RESET_VALUE 0

/*
 * Macros for device 'expected_result_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_3_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_3_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_3_COMPONENT_NAME expected_result_3
#define EXPECTED_RESULT_3_BASE 0xc0
#define EXPECTED_RESULT_3_SPAN 16
#define EXPECTED_RESULT_3_END 0xcf
#define EXPECTED_RESULT_3_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_3_CAPTURE 0
#define EXPECTED_RESULT_3_DATA_WIDTH 32
#define EXPECTED_RESULT_3_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_3_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_3_EDGE_TYPE NONE
#define EXPECTED_RESULT_3_FREQ 50000000
#define EXPECTED_RESULT_3_HAS_IN 0
#define EXPECTED_RESULT_3_HAS_OUT 1
#define EXPECTED_RESULT_3_HAS_TRI 0
#define EXPECTED_RESULT_3_IRQ_TYPE NONE
#define EXPECTED_RESULT_3_RESET_VALUE 0

/*
 * Macros for device 'expected_result_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_2_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_2_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_2_COMPONENT_NAME expected_result_2
#define EXPECTED_RESULT_2_BASE 0xd0
#define EXPECTED_RESULT_2_SPAN 16
#define EXPECTED_RESULT_2_END 0xdf
#define EXPECTED_RESULT_2_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_2_CAPTURE 0
#define EXPECTED_RESULT_2_DATA_WIDTH 32
#define EXPECTED_RESULT_2_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_2_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_2_EDGE_TYPE NONE
#define EXPECTED_RESULT_2_FREQ 50000000
#define EXPECTED_RESULT_2_HAS_IN 0
#define EXPECTED_RESULT_2_HAS_OUT 1
#define EXPECTED_RESULT_2_HAS_TRI 0
#define EXPECTED_RESULT_2_IRQ_TYPE NONE
#define EXPECTED_RESULT_2_RESET_VALUE 0

/*
 * Macros for device 'expected_result_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_1_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_1_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_1_COMPONENT_NAME expected_result_1
#define EXPECTED_RESULT_1_BASE 0xe0
#define EXPECTED_RESULT_1_SPAN 16
#define EXPECTED_RESULT_1_END 0xef
#define EXPECTED_RESULT_1_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_1_CAPTURE 0
#define EXPECTED_RESULT_1_DATA_WIDTH 32
#define EXPECTED_RESULT_1_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_1_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_1_EDGE_TYPE NONE
#define EXPECTED_RESULT_1_FREQ 50000000
#define EXPECTED_RESULT_1_HAS_IN 0
#define EXPECTED_RESULT_1_HAS_OUT 1
#define EXPECTED_RESULT_1_HAS_TRI 0
#define EXPECTED_RESULT_1_IRQ_TYPE NONE
#define EXPECTED_RESULT_1_RESET_VALUE 0

/*
 * Macros for device 'expected_result_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXPECTED_RESULT_0_'.
 * The prefix is the slave descriptor.
 */
#define EXPECTED_RESULT_0_COMPONENT_TYPE altera_avalon_pio
#define EXPECTED_RESULT_0_COMPONENT_NAME expected_result_0
#define EXPECTED_RESULT_0_BASE 0xf0
#define EXPECTED_RESULT_0_SPAN 16
#define EXPECTED_RESULT_0_END 0xff
#define EXPECTED_RESULT_0_BIT_CLEARING_EDGE_REGISTER 0
#define EXPECTED_RESULT_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXPECTED_RESULT_0_CAPTURE 0
#define EXPECTED_RESULT_0_DATA_WIDTH 32
#define EXPECTED_RESULT_0_DO_TEST_BENCH_WIRING 0
#define EXPECTED_RESULT_0_DRIVEN_SIM_VALUE 0
#define EXPECTED_RESULT_0_EDGE_TYPE NONE
#define EXPECTED_RESULT_0_FREQ 50000000
#define EXPECTED_RESULT_0_HAS_IN 0
#define EXPECTED_RESULT_0_HAS_OUT 1
#define EXPECTED_RESULT_0_HAS_TRI 0
#define EXPECTED_RESULT_0_IRQ_TYPE NONE
#define EXPECTED_RESULT_0_RESET_VALUE 0

/*
 * Macros for device 'done_processing_feedback', class 'altera_avalon_pio'
 * The macros are prefixed with 'DONE_PROCESSING_FEEDBACK_'.
 * The prefix is the slave descriptor.
 */
#define DONE_PROCESSING_FEEDBACK_COMPONENT_TYPE altera_avalon_pio
#define DONE_PROCESSING_FEEDBACK_COMPONENT_NAME done_processing_feedback
#define DONE_PROCESSING_FEEDBACK_BASE 0x100
#define DONE_PROCESSING_FEEDBACK_SPAN 16
#define DONE_PROCESSING_FEEDBACK_END 0x10f
#define DONE_PROCESSING_FEEDBACK_BIT_CLEARING_EDGE_REGISTER 0
#define DONE_PROCESSING_FEEDBACK_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DONE_PROCESSING_FEEDBACK_CAPTURE 0
#define DONE_PROCESSING_FEEDBACK_DATA_WIDTH 1
#define DONE_PROCESSING_FEEDBACK_DO_TEST_BENCH_WIRING 0
#define DONE_PROCESSING_FEEDBACK_DRIVEN_SIM_VALUE 0
#define DONE_PROCESSING_FEEDBACK_EDGE_TYPE NONE
#define DONE_PROCESSING_FEEDBACK_FREQ 50000000
#define DONE_PROCESSING_FEEDBACK_HAS_IN 0
#define DONE_PROCESSING_FEEDBACK_HAS_OUT 1
#define DONE_PROCESSING_FEEDBACK_HAS_TRI 0
#define DONE_PROCESSING_FEEDBACK_IRQ_TYPE NONE
#define DONE_PROCESSING_FEEDBACK_RESET_VALUE 0

/*
 * Macros for device 'ready_to_process', class 'altera_avalon_pio'
 * The macros are prefixed with 'READY_TO_PROCESS_'.
 * The prefix is the slave descriptor.
 */
#define READY_TO_PROCESS_COMPONENT_TYPE altera_avalon_pio
#define READY_TO_PROCESS_COMPONENT_NAME ready_to_process
#define READY_TO_PROCESS_BASE 0x110
#define READY_TO_PROCESS_SPAN 16
#define READY_TO_PROCESS_END 0x11f
#define READY_TO_PROCESS_BIT_CLEARING_EDGE_REGISTER 0
#define READY_TO_PROCESS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define READY_TO_PROCESS_CAPTURE 0
#define READY_TO_PROCESS_DATA_WIDTH 1
#define READY_TO_PROCESS_DO_TEST_BENCH_WIRING 0
#define READY_TO_PROCESS_DRIVEN_SIM_VALUE 0
#define READY_TO_PROCESS_EDGE_TYPE NONE
#define READY_TO_PROCESS_FREQ 50000000
#define READY_TO_PROCESS_HAS_IN 1
#define READY_TO_PROCESS_HAS_OUT 0
#define READY_TO_PROCESS_HAS_TRI 0
#define READY_TO_PROCESS_IRQ_TYPE NONE
#define READY_TO_PROCESS_RESET_VALUE 0

/*
 * Macros for device 'done_processing_chrom', class 'altera_avalon_pio'
 * The macros are prefixed with 'DONE_PROCESSING_CHROM_'.
 * The prefix is the slave descriptor.
 */
#define DONE_PROCESSING_CHROM_COMPONENT_TYPE altera_avalon_pio
#define DONE_PROCESSING_CHROM_COMPONENT_NAME done_processing_chrom
#define DONE_PROCESSING_CHROM_BASE 0x120
#define DONE_PROCESSING_CHROM_SPAN 16
#define DONE_PROCESSING_CHROM_END 0x12f
#define DONE_PROCESSING_CHROM_BIT_CLEARING_EDGE_REGISTER 0
#define DONE_PROCESSING_CHROM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DONE_PROCESSING_CHROM_CAPTURE 0
#define DONE_PROCESSING_CHROM_DATA_WIDTH 1
#define DONE_PROCESSING_CHROM_DO_TEST_BENCH_WIRING 0
#define DONE_PROCESSING_CHROM_DRIVEN_SIM_VALUE 0
#define DONE_PROCESSING_CHROM_EDGE_TYPE NONE
#define DONE_PROCESSING_CHROM_FREQ 50000000
#define DONE_PROCESSING_CHROM_HAS_IN 1
#define DONE_PROCESSING_CHROM_HAS_OUT 0
#define DONE_PROCESSING_CHROM_HAS_TRI 0
#define DONE_PROCESSING_CHROM_IRQ_TYPE NONE
#define DONE_PROCESSING_CHROM_RESET_VALUE 0

/*
 * Macros for device 'start_processing_chrom', class 'altera_avalon_pio'
 * The macros are prefixed with 'START_PROCESSING_CHROM_'.
 * The prefix is the slave descriptor.
 */
#define START_PROCESSING_CHROM_COMPONENT_TYPE altera_avalon_pio
#define START_PROCESSING_CHROM_COMPONENT_NAME start_processing_chrom
#define START_PROCESSING_CHROM_BASE 0x130
#define START_PROCESSING_CHROM_SPAN 16
#define START_PROCESSING_CHROM_END 0x13f
#define START_PROCESSING_CHROM_BIT_CLEARING_EDGE_REGISTER 0
#define START_PROCESSING_CHROM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define START_PROCESSING_CHROM_CAPTURE 0
#define START_PROCESSING_CHROM_DATA_WIDTH 1
#define START_PROCESSING_CHROM_DO_TEST_BENCH_WIRING 0
#define START_PROCESSING_CHROM_DRIVEN_SIM_VALUE 0
#define START_PROCESSING_CHROM_EDGE_TYPE NONE
#define START_PROCESSING_CHROM_FREQ 50000000
#define START_PROCESSING_CHROM_HAS_IN 0
#define START_PROCESSING_CHROM_HAS_OUT 1
#define START_PROCESSING_CHROM_HAS_TRI 0
#define START_PROCESSING_CHROM_IRQ_TYPE NONE
#define START_PROCESSING_CHROM_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_30', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_30_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_30_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_30_COMPONENT_NAME chrom_seg_30
#define CHROM_SEG_30_BASE 0x140
#define CHROM_SEG_30_SPAN 16
#define CHROM_SEG_30_END 0x14f
#define CHROM_SEG_30_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_30_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_30_CAPTURE 0
#define CHROM_SEG_30_DATA_WIDTH 32
#define CHROM_SEG_30_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_30_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_30_EDGE_TYPE NONE
#define CHROM_SEG_30_FREQ 50000000
#define CHROM_SEG_30_HAS_IN 0
#define CHROM_SEG_30_HAS_OUT 1
#define CHROM_SEG_30_HAS_TRI 0
#define CHROM_SEG_30_IRQ_TYPE NONE
#define CHROM_SEG_30_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_29', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_29_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_29_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_29_COMPONENT_NAME chrom_seg_29
#define CHROM_SEG_29_BASE 0x150
#define CHROM_SEG_29_SPAN 16
#define CHROM_SEG_29_END 0x15f
#define CHROM_SEG_29_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_29_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_29_CAPTURE 0
#define CHROM_SEG_29_DATA_WIDTH 32
#define CHROM_SEG_29_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_29_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_29_EDGE_TYPE NONE
#define CHROM_SEG_29_FREQ 50000000
#define CHROM_SEG_29_HAS_IN 0
#define CHROM_SEG_29_HAS_OUT 1
#define CHROM_SEG_29_HAS_TRI 0
#define CHROM_SEG_29_IRQ_TYPE NONE
#define CHROM_SEG_29_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_28', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_28_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_28_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_28_COMPONENT_NAME chrom_seg_28
#define CHROM_SEG_28_BASE 0x160
#define CHROM_SEG_28_SPAN 16
#define CHROM_SEG_28_END 0x16f
#define CHROM_SEG_28_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_28_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_28_CAPTURE 0
#define CHROM_SEG_28_DATA_WIDTH 32
#define CHROM_SEG_28_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_28_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_28_EDGE_TYPE NONE
#define CHROM_SEG_28_FREQ 50000000
#define CHROM_SEG_28_HAS_IN 0
#define CHROM_SEG_28_HAS_OUT 1
#define CHROM_SEG_28_HAS_TRI 0
#define CHROM_SEG_28_IRQ_TYPE NONE
#define CHROM_SEG_28_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_27', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_27_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_27_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_27_COMPONENT_NAME chrom_seg_27
#define CHROM_SEG_27_BASE 0x170
#define CHROM_SEG_27_SPAN 16
#define CHROM_SEG_27_END 0x17f
#define CHROM_SEG_27_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_27_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_27_CAPTURE 0
#define CHROM_SEG_27_DATA_WIDTH 32
#define CHROM_SEG_27_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_27_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_27_EDGE_TYPE NONE
#define CHROM_SEG_27_FREQ 50000000
#define CHROM_SEG_27_HAS_IN 0
#define CHROM_SEG_27_HAS_OUT 1
#define CHROM_SEG_27_HAS_TRI 0
#define CHROM_SEG_27_IRQ_TYPE NONE
#define CHROM_SEG_27_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_26', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_26_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_26_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_26_COMPONENT_NAME chrom_seg_26
#define CHROM_SEG_26_BASE 0x180
#define CHROM_SEG_26_SPAN 16
#define CHROM_SEG_26_END 0x18f
#define CHROM_SEG_26_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_26_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_26_CAPTURE 0
#define CHROM_SEG_26_DATA_WIDTH 32
#define CHROM_SEG_26_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_26_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_26_EDGE_TYPE NONE
#define CHROM_SEG_26_FREQ 50000000
#define CHROM_SEG_26_HAS_IN 0
#define CHROM_SEG_26_HAS_OUT 1
#define CHROM_SEG_26_HAS_TRI 0
#define CHROM_SEG_26_IRQ_TYPE NONE
#define CHROM_SEG_26_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_25', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_25_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_25_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_25_COMPONENT_NAME chrom_seg_25
#define CHROM_SEG_25_BASE 0x190
#define CHROM_SEG_25_SPAN 16
#define CHROM_SEG_25_END 0x19f
#define CHROM_SEG_25_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_25_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_25_CAPTURE 0
#define CHROM_SEG_25_DATA_WIDTH 32
#define CHROM_SEG_25_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_25_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_25_EDGE_TYPE NONE
#define CHROM_SEG_25_FREQ 50000000
#define CHROM_SEG_25_HAS_IN 0
#define CHROM_SEG_25_HAS_OUT 1
#define CHROM_SEG_25_HAS_TRI 0
#define CHROM_SEG_25_IRQ_TYPE NONE
#define CHROM_SEG_25_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_24', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_24_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_24_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_24_COMPONENT_NAME chrom_seg_24
#define CHROM_SEG_24_BASE 0x1a0
#define CHROM_SEG_24_SPAN 16
#define CHROM_SEG_24_END 0x1af
#define CHROM_SEG_24_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_24_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_24_CAPTURE 0
#define CHROM_SEG_24_DATA_WIDTH 32
#define CHROM_SEG_24_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_24_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_24_EDGE_TYPE NONE
#define CHROM_SEG_24_FREQ 50000000
#define CHROM_SEG_24_HAS_IN 0
#define CHROM_SEG_24_HAS_OUT 1
#define CHROM_SEG_24_HAS_TRI 0
#define CHROM_SEG_24_IRQ_TYPE NONE
#define CHROM_SEG_24_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_23', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_23_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_23_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_23_COMPONENT_NAME chrom_seg_23
#define CHROM_SEG_23_BASE 0x1b0
#define CHROM_SEG_23_SPAN 16
#define CHROM_SEG_23_END 0x1bf
#define CHROM_SEG_23_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_23_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_23_CAPTURE 0
#define CHROM_SEG_23_DATA_WIDTH 32
#define CHROM_SEG_23_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_23_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_23_EDGE_TYPE NONE
#define CHROM_SEG_23_FREQ 50000000
#define CHROM_SEG_23_HAS_IN 0
#define CHROM_SEG_23_HAS_OUT 1
#define CHROM_SEG_23_HAS_TRI 0
#define CHROM_SEG_23_IRQ_TYPE NONE
#define CHROM_SEG_23_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_22', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_22_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_22_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_22_COMPONENT_NAME chrom_seg_22
#define CHROM_SEG_22_BASE 0x1c0
#define CHROM_SEG_22_SPAN 16
#define CHROM_SEG_22_END 0x1cf
#define CHROM_SEG_22_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_22_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_22_CAPTURE 0
#define CHROM_SEG_22_DATA_WIDTH 32
#define CHROM_SEG_22_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_22_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_22_EDGE_TYPE NONE
#define CHROM_SEG_22_FREQ 50000000
#define CHROM_SEG_22_HAS_IN 0
#define CHROM_SEG_22_HAS_OUT 1
#define CHROM_SEG_22_HAS_TRI 0
#define CHROM_SEG_22_IRQ_TYPE NONE
#define CHROM_SEG_22_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_21', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_21_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_21_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_21_COMPONENT_NAME chrom_seg_21
#define CHROM_SEG_21_BASE 0x1d0
#define CHROM_SEG_21_SPAN 16
#define CHROM_SEG_21_END 0x1df
#define CHROM_SEG_21_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_21_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_21_CAPTURE 0
#define CHROM_SEG_21_DATA_WIDTH 32
#define CHROM_SEG_21_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_21_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_21_EDGE_TYPE NONE
#define CHROM_SEG_21_FREQ 50000000
#define CHROM_SEG_21_HAS_IN 0
#define CHROM_SEG_21_HAS_OUT 1
#define CHROM_SEG_21_HAS_TRI 0
#define CHROM_SEG_21_IRQ_TYPE NONE
#define CHROM_SEG_21_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_20', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_20_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_20_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_20_COMPONENT_NAME chrom_seg_20
#define CHROM_SEG_20_BASE 0x1e0
#define CHROM_SEG_20_SPAN 16
#define CHROM_SEG_20_END 0x1ef
#define CHROM_SEG_20_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_20_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_20_CAPTURE 0
#define CHROM_SEG_20_DATA_WIDTH 32
#define CHROM_SEG_20_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_20_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_20_EDGE_TYPE NONE
#define CHROM_SEG_20_FREQ 50000000
#define CHROM_SEG_20_HAS_IN 0
#define CHROM_SEG_20_HAS_OUT 1
#define CHROM_SEG_20_HAS_TRI 0
#define CHROM_SEG_20_IRQ_TYPE NONE
#define CHROM_SEG_20_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_19', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_19_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_19_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_19_COMPONENT_NAME chrom_seg_19
#define CHROM_SEG_19_BASE 0x1f0
#define CHROM_SEG_19_SPAN 16
#define CHROM_SEG_19_END 0x1ff
#define CHROM_SEG_19_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_19_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_19_CAPTURE 0
#define CHROM_SEG_19_DATA_WIDTH 32
#define CHROM_SEG_19_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_19_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_19_EDGE_TYPE NONE
#define CHROM_SEG_19_FREQ 50000000
#define CHROM_SEG_19_HAS_IN 0
#define CHROM_SEG_19_HAS_OUT 1
#define CHROM_SEG_19_HAS_TRI 0
#define CHROM_SEG_19_IRQ_TYPE NONE
#define CHROM_SEG_19_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_18', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_18_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_18_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_18_COMPONENT_NAME chrom_seg_18
#define CHROM_SEG_18_BASE 0x200
#define CHROM_SEG_18_SPAN 16
#define CHROM_SEG_18_END 0x20f
#define CHROM_SEG_18_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_18_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_18_CAPTURE 0
#define CHROM_SEG_18_DATA_WIDTH 32
#define CHROM_SEG_18_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_18_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_18_EDGE_TYPE NONE
#define CHROM_SEG_18_FREQ 50000000
#define CHROM_SEG_18_HAS_IN 0
#define CHROM_SEG_18_HAS_OUT 1
#define CHROM_SEG_18_HAS_TRI 0
#define CHROM_SEG_18_IRQ_TYPE NONE
#define CHROM_SEG_18_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_17', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_17_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_17_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_17_COMPONENT_NAME chrom_seg_17
#define CHROM_SEG_17_BASE 0x210
#define CHROM_SEG_17_SPAN 16
#define CHROM_SEG_17_END 0x21f
#define CHROM_SEG_17_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_17_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_17_CAPTURE 0
#define CHROM_SEG_17_DATA_WIDTH 32
#define CHROM_SEG_17_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_17_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_17_EDGE_TYPE NONE
#define CHROM_SEG_17_FREQ 50000000
#define CHROM_SEG_17_HAS_IN 0
#define CHROM_SEG_17_HAS_OUT 1
#define CHROM_SEG_17_HAS_TRI 0
#define CHROM_SEG_17_IRQ_TYPE NONE
#define CHROM_SEG_17_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_16', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_16_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_16_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_16_COMPONENT_NAME chrom_seg_16
#define CHROM_SEG_16_BASE 0x220
#define CHROM_SEG_16_SPAN 16
#define CHROM_SEG_16_END 0x22f
#define CHROM_SEG_16_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_16_CAPTURE 0
#define CHROM_SEG_16_DATA_WIDTH 32
#define CHROM_SEG_16_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_16_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_16_EDGE_TYPE NONE
#define CHROM_SEG_16_FREQ 50000000
#define CHROM_SEG_16_HAS_IN 0
#define CHROM_SEG_16_HAS_OUT 1
#define CHROM_SEG_16_HAS_TRI 0
#define CHROM_SEG_16_IRQ_TYPE NONE
#define CHROM_SEG_16_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_15', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_15_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_15_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_15_COMPONENT_NAME chrom_seg_15
#define CHROM_SEG_15_BASE 0x230
#define CHROM_SEG_15_SPAN 16
#define CHROM_SEG_15_END 0x23f
#define CHROM_SEG_15_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_15_CAPTURE 0
#define CHROM_SEG_15_DATA_WIDTH 32
#define CHROM_SEG_15_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_15_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_15_EDGE_TYPE NONE
#define CHROM_SEG_15_FREQ 50000000
#define CHROM_SEG_15_HAS_IN 0
#define CHROM_SEG_15_HAS_OUT 1
#define CHROM_SEG_15_HAS_TRI 0
#define CHROM_SEG_15_IRQ_TYPE NONE
#define CHROM_SEG_15_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_14', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_14_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_14_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_14_COMPONENT_NAME chrom_seg_14
#define CHROM_SEG_14_BASE 0x240
#define CHROM_SEG_14_SPAN 16
#define CHROM_SEG_14_END 0x24f
#define CHROM_SEG_14_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_14_CAPTURE 0
#define CHROM_SEG_14_DATA_WIDTH 32
#define CHROM_SEG_14_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_14_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_14_EDGE_TYPE NONE
#define CHROM_SEG_14_FREQ 50000000
#define CHROM_SEG_14_HAS_IN 0
#define CHROM_SEG_14_HAS_OUT 1
#define CHROM_SEG_14_HAS_TRI 0
#define CHROM_SEG_14_IRQ_TYPE NONE
#define CHROM_SEG_14_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_13', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_13_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_13_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_13_COMPONENT_NAME chrom_seg_13
#define CHROM_SEG_13_BASE 0x250
#define CHROM_SEG_13_SPAN 16
#define CHROM_SEG_13_END 0x25f
#define CHROM_SEG_13_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_13_CAPTURE 0
#define CHROM_SEG_13_DATA_WIDTH 32
#define CHROM_SEG_13_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_13_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_13_EDGE_TYPE NONE
#define CHROM_SEG_13_FREQ 50000000
#define CHROM_SEG_13_HAS_IN 0
#define CHROM_SEG_13_HAS_OUT 1
#define CHROM_SEG_13_HAS_TRI 0
#define CHROM_SEG_13_IRQ_TYPE NONE
#define CHROM_SEG_13_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_12', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_12_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_12_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_12_COMPONENT_NAME chrom_seg_12
#define CHROM_SEG_12_BASE 0x260
#define CHROM_SEG_12_SPAN 16
#define CHROM_SEG_12_END 0x26f
#define CHROM_SEG_12_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_12_CAPTURE 0
#define CHROM_SEG_12_DATA_WIDTH 32
#define CHROM_SEG_12_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_12_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_12_EDGE_TYPE NONE
#define CHROM_SEG_12_FREQ 50000000
#define CHROM_SEG_12_HAS_IN 0
#define CHROM_SEG_12_HAS_OUT 1
#define CHROM_SEG_12_HAS_TRI 0
#define CHROM_SEG_12_IRQ_TYPE NONE
#define CHROM_SEG_12_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_11', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_11_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_11_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_11_COMPONENT_NAME chrom_seg_11
#define CHROM_SEG_11_BASE 0x270
#define CHROM_SEG_11_SPAN 16
#define CHROM_SEG_11_END 0x27f
#define CHROM_SEG_11_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_11_CAPTURE 0
#define CHROM_SEG_11_DATA_WIDTH 32
#define CHROM_SEG_11_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_11_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_11_EDGE_TYPE NONE
#define CHROM_SEG_11_FREQ 50000000
#define CHROM_SEG_11_HAS_IN 0
#define CHROM_SEG_11_HAS_OUT 1
#define CHROM_SEG_11_HAS_TRI 0
#define CHROM_SEG_11_IRQ_TYPE NONE
#define CHROM_SEG_11_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_10', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_10_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_10_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_10_COMPONENT_NAME chrom_seg_10
#define CHROM_SEG_10_BASE 0x280
#define CHROM_SEG_10_SPAN 16
#define CHROM_SEG_10_END 0x28f
#define CHROM_SEG_10_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_10_CAPTURE 0
#define CHROM_SEG_10_DATA_WIDTH 32
#define CHROM_SEG_10_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_10_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_10_EDGE_TYPE NONE
#define CHROM_SEG_10_FREQ 50000000
#define CHROM_SEG_10_HAS_IN 0
#define CHROM_SEG_10_HAS_OUT 1
#define CHROM_SEG_10_HAS_TRI 0
#define CHROM_SEG_10_IRQ_TYPE NONE
#define CHROM_SEG_10_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_9', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_9_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_9_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_9_COMPONENT_NAME chrom_seg_9
#define CHROM_SEG_9_BASE 0x290
#define CHROM_SEG_9_SPAN 16
#define CHROM_SEG_9_END 0x29f
#define CHROM_SEG_9_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_9_CAPTURE 0
#define CHROM_SEG_9_DATA_WIDTH 32
#define CHROM_SEG_9_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_9_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_9_EDGE_TYPE NONE
#define CHROM_SEG_9_FREQ 50000000
#define CHROM_SEG_9_HAS_IN 0
#define CHROM_SEG_9_HAS_OUT 1
#define CHROM_SEG_9_HAS_TRI 0
#define CHROM_SEG_9_IRQ_TYPE NONE
#define CHROM_SEG_9_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_8', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_8_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_8_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_8_COMPONENT_NAME chrom_seg_8
#define CHROM_SEG_8_BASE 0x2a0
#define CHROM_SEG_8_SPAN 16
#define CHROM_SEG_8_END 0x2af
#define CHROM_SEG_8_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_8_CAPTURE 0
#define CHROM_SEG_8_DATA_WIDTH 32
#define CHROM_SEG_8_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_8_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_8_EDGE_TYPE NONE
#define CHROM_SEG_8_FREQ 50000000
#define CHROM_SEG_8_HAS_IN 0
#define CHROM_SEG_8_HAS_OUT 1
#define CHROM_SEG_8_HAS_TRI 0
#define CHROM_SEG_8_IRQ_TYPE NONE
#define CHROM_SEG_8_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_7_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_7_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_7_COMPONENT_NAME chrom_seg_7
#define CHROM_SEG_7_BASE 0x2b0
#define CHROM_SEG_7_SPAN 16
#define CHROM_SEG_7_END 0x2bf
#define CHROM_SEG_7_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_7_CAPTURE 0
#define CHROM_SEG_7_DATA_WIDTH 32
#define CHROM_SEG_7_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_7_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_7_EDGE_TYPE NONE
#define CHROM_SEG_7_FREQ 50000000
#define CHROM_SEG_7_HAS_IN 0
#define CHROM_SEG_7_HAS_OUT 1
#define CHROM_SEG_7_HAS_TRI 0
#define CHROM_SEG_7_IRQ_TYPE NONE
#define CHROM_SEG_7_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_6_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_6_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_6_COMPONENT_NAME chrom_seg_6
#define CHROM_SEG_6_BASE 0x2c0
#define CHROM_SEG_6_SPAN 16
#define CHROM_SEG_6_END 0x2cf
#define CHROM_SEG_6_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_6_CAPTURE 0
#define CHROM_SEG_6_DATA_WIDTH 32
#define CHROM_SEG_6_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_6_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_6_EDGE_TYPE NONE
#define CHROM_SEG_6_FREQ 50000000
#define CHROM_SEG_6_HAS_IN 0
#define CHROM_SEG_6_HAS_OUT 1
#define CHROM_SEG_6_HAS_TRI 0
#define CHROM_SEG_6_IRQ_TYPE NONE
#define CHROM_SEG_6_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_5_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_5_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_5_COMPONENT_NAME chrom_seg_5
#define CHROM_SEG_5_BASE 0x2d0
#define CHROM_SEG_5_SPAN 16
#define CHROM_SEG_5_END 0x2df
#define CHROM_SEG_5_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_5_CAPTURE 0
#define CHROM_SEG_5_DATA_WIDTH 32
#define CHROM_SEG_5_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_5_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_5_EDGE_TYPE NONE
#define CHROM_SEG_5_FREQ 50000000
#define CHROM_SEG_5_HAS_IN 0
#define CHROM_SEG_5_HAS_OUT 1
#define CHROM_SEG_5_HAS_TRI 0
#define CHROM_SEG_5_IRQ_TYPE NONE
#define CHROM_SEG_5_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_4_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_4_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_4_COMPONENT_NAME chrom_seg_4
#define CHROM_SEG_4_BASE 0x2e0
#define CHROM_SEG_4_SPAN 16
#define CHROM_SEG_4_END 0x2ef
#define CHROM_SEG_4_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_4_CAPTURE 0
#define CHROM_SEG_4_DATA_WIDTH 32
#define CHROM_SEG_4_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_4_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_4_EDGE_TYPE NONE
#define CHROM_SEG_4_FREQ 50000000
#define CHROM_SEG_4_HAS_IN 0
#define CHROM_SEG_4_HAS_OUT 1
#define CHROM_SEG_4_HAS_TRI 0
#define CHROM_SEG_4_IRQ_TYPE NONE
#define CHROM_SEG_4_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_3_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_3_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_3_COMPONENT_NAME chrom_seg_3
#define CHROM_SEG_3_BASE 0x2f0
#define CHROM_SEG_3_SPAN 16
#define CHROM_SEG_3_END 0x2ff
#define CHROM_SEG_3_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_3_CAPTURE 0
#define CHROM_SEG_3_DATA_WIDTH 32
#define CHROM_SEG_3_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_3_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_3_EDGE_TYPE NONE
#define CHROM_SEG_3_FREQ 50000000
#define CHROM_SEG_3_HAS_IN 0
#define CHROM_SEG_3_HAS_OUT 1
#define CHROM_SEG_3_HAS_TRI 0
#define CHROM_SEG_3_IRQ_TYPE NONE
#define CHROM_SEG_3_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_2_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_2_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_2_COMPONENT_NAME chrom_seg_2
#define CHROM_SEG_2_BASE 0x300
#define CHROM_SEG_2_SPAN 16
#define CHROM_SEG_2_END 0x30f
#define CHROM_SEG_2_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_2_CAPTURE 0
#define CHROM_SEG_2_DATA_WIDTH 32
#define CHROM_SEG_2_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_2_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_2_EDGE_TYPE NONE
#define CHROM_SEG_2_FREQ 50000000
#define CHROM_SEG_2_HAS_IN 0
#define CHROM_SEG_2_HAS_OUT 1
#define CHROM_SEG_2_HAS_TRI 0
#define CHROM_SEG_2_IRQ_TYPE NONE
#define CHROM_SEG_2_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_1_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_1_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_1_COMPONENT_NAME chrom_seg_1
#define CHROM_SEG_1_BASE 0x310
#define CHROM_SEG_1_SPAN 16
#define CHROM_SEG_1_END 0x31f
#define CHROM_SEG_1_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_1_CAPTURE 0
#define CHROM_SEG_1_DATA_WIDTH 32
#define CHROM_SEG_1_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_1_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_1_EDGE_TYPE NONE
#define CHROM_SEG_1_FREQ 50000000
#define CHROM_SEG_1_HAS_IN 0
#define CHROM_SEG_1_HAS_OUT 1
#define CHROM_SEG_1_HAS_TRI 0
#define CHROM_SEG_1_IRQ_TYPE NONE
#define CHROM_SEG_1_RESET_VALUE 0

/*
 * Macros for device 'chrom_seg_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHROM_SEG_0_'.
 * The prefix is the slave descriptor.
 */
#define CHROM_SEG_0_COMPONENT_TYPE altera_avalon_pio
#define CHROM_SEG_0_COMPONENT_NAME chrom_seg_0
#define CHROM_SEG_0_BASE 0x320
#define CHROM_SEG_0_SPAN 16
#define CHROM_SEG_0_END 0x32f
#define CHROM_SEG_0_BIT_CLEARING_EDGE_REGISTER 0
#define CHROM_SEG_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHROM_SEG_0_CAPTURE 0
#define CHROM_SEG_0_DATA_WIDTH 32
#define CHROM_SEG_0_DO_TEST_BENCH_WIRING 0
#define CHROM_SEG_0_DRIVEN_SIM_VALUE 0
#define CHROM_SEG_0_EDGE_TYPE NONE
#define CHROM_SEG_0_FREQ 50000000
#define CHROM_SEG_0_HAS_IN 0
#define CHROM_SEG_0_HAS_OUT 1
#define CHROM_SEG_0_HAS_TRI 0
#define CHROM_SEG_0_IRQ_TYPE NONE
#define CHROM_SEG_0_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
